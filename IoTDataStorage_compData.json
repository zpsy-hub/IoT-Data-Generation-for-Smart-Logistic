{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"IotDataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract IoTDataStorage {\\r\\n    struct DataEntry {\\r\\n        string dataType;\\r\\n        string value;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    address public owner;\\r\\n    mapping(string => DataEntry[]) private deviceData;\\r\\n    mapping(address => bool) public authorizedDevices;\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not contract owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorizedDevices[msg.sender], \\\"Unauthorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function authorizeDevice(address device) public onlyOwner {\\r\\n        authorizedDevices[device] = true;\\r\\n    }\\r\\n\\r\\n    function revokeDevice(address device) public onlyOwner {\\r\\n        authorizedDevices[device] = false;\\r\\n    }\\r\\n\\r\\n    function storeData(string memory deviceID, string memory dataType, string memory value) public onlyAuthorized {\\r\\n        require(bytes(deviceID).length > 0, \\\"Invalid deviceID\\\");\\r\\n        require(bytes(dataType).length > 0, \\\"Invalid dataType\\\");\\r\\n        require(bytes(value).length > 0, \\\"Invalid value\\\");\\r\\n\\r\\n        DataEntry memory entry = DataEntry(dataType, value, block.timestamp);\\r\\n        deviceData[deviceID].push(entry);\\r\\n    }\\r\\n\\r\\n    function getDataCount(string memory deviceID) public view returns (uint256) {\\r\\n        return deviceData[deviceID].length;\\r\\n    }\\r\\n\\r\\n    function getDataByIndex(string memory deviceID, uint256 index) public view returns (string memory, string memory, uint256) {\\r\\n        require(index < deviceData[deviceID].length, \\\"Index out of bounds\\\");\\r\\n        DataEntry memory entry = deviceData[deviceID][index];\\r\\n        return (entry.dataType, entry.value, entry.timestamp);\\r\\n    }\\r\\n}\\r\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}",
	"name": "IoTDataStorage",
	"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"authorizeDevice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedDevices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDataByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"}],\"name\":\"getDataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"revokeDevice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"storeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"IotDataStorage.sol\":\"IoTDataStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"IotDataStorage.sol\":{\"keccak256\":\"0xdc70149d1f41f9f5ef3b24b0d218d73c709d71e4daac21de26cab22a1f9545d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb39beb85778734342f113f2acde989f7e29c09156fe0e71ff8a08d6d947bc68\",\"dweb:/ipfs/QmSKtVbDfsN3pDofFWSB1oCbn7cgvNXxen2nBG7RNVXgP8\"]}},\"version\":1}",
	"bytecode": {
		"generatedSources": [],
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061101d806100606000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636fe3c2b21161005b5780636fe3c2b2146101145780638da5cb5b14610130578063933eb9ca1461014e578063d4001ef21461016a5761007d565b80631b11092d1461008257806323dfc578146100b257806330a76b38146100e4575b600080fd5b61009c6004803603810190610097919061092d565b610186565b6040516100a99190610ccb565b60405180910390f35b6100cc60048036038101906100c79190610a2e565b6101a6565b6040516100db93929190610ce6565b60405180910390f35b6100fe60048036038101906100f99190610956565b6103cc565b60405161010b9190610deb565b60405180910390f35b61012e6004803603810190610129919061092d565b6103f7565b005b6101386104e0565b6040516101459190610cb0565b60405180910390f35b6101686004803603810190610163919061092d565b610504565b005b610184600480360381019061017f9190610997565b6105ed565b005b60026020528060005260406000206000915054906101000a900460ff1681565b60608060006001856040516101bb9190610c99565b908152602001604051809103902080549050841061020e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020590610dcb565b60405180910390fd5b60006001866040516102209190610c99565b90815260200160405180910390208581548110610266577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201805461028f90610f18565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90610f18565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b5050505050815260200160018201805461032190610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610f18565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b60006001826040516103de9190610c99565b9081526020016040518091039020805490509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610dab565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610dab565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610d2b565b60405180910390fd5b60008351116106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610d8b565b60405180910390fd5b6000825111610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890610d4b565b60405180910390fd5b6000815111610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c90610d6b565b60405180910390fd5b600060405180606001604052808481526020018381526020014281525090506001846040516107749190610c99565b908152602001604051809103902081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906107c89291906107f8565b5060208201518160010190805190602001906107e59291906107f8565b5060408201518160020155505050505050565b82805461080490610f18565b90600052602060002090601f016020900481019282610826576000855561086d565b82601f1061083f57805160ff191683800117855561086d565b8280016001018555821561086d579182015b8281111561086c578251825591602001919060010190610851565b5b50905061087a919061087e565b5090565b5b8082111561089757600081600090555060010161087f565b5090565b60006108ae6108a984610e37565b610e06565b9050828152602081018484840111156108c657600080fd5b6108d1848285610ed6565b509392505050565b6000813590506108e881610fb9565b92915050565b600082601f8301126108ff57600080fd5b813561090f84826020860161089b565b91505092915050565b60008135905061092781610fd0565b92915050565b60006020828403121561093f57600080fd5b600061094d848285016108d9565b91505092915050565b60006020828403121561096857600080fd5b600082013567ffffffffffffffff81111561098257600080fd5b61098e848285016108ee565b91505092915050565b6000806000606084860312156109ac57600080fd5b600084013567ffffffffffffffff8111156109c657600080fd5b6109d2868287016108ee565b935050602084013567ffffffffffffffff8111156109ef57600080fd5b6109fb868287016108ee565b925050604084013567ffffffffffffffff811115610a1857600080fd5b610a24868287016108ee565b9150509250925092565b60008060408385031215610a4157600080fd5b600083013567ffffffffffffffff811115610a5b57600080fd5b610a67858286016108ee565b9250506020610a7885828601610918565b9150509250929050565b610a8b81610e8e565b82525050565b610a9a81610ea0565b82525050565b6000610aab82610e67565b610ab58185610e72565b9350610ac5818560208601610ee5565b610ace81610fa8565b840191505092915050565b6000610ae482610e67565b610aee8185610e83565b9350610afe818560208601610ee5565b80840191505092915050565b6000610b17600c83610e72565b91507f556e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000610b57601083610e72565b91507f496e76616c6964206461746154797065000000000000000000000000000000006000830152602082019050919050565b6000610b97600d83610e72565b91507f496e76616c69642076616c7565000000000000000000000000000000000000006000830152602082019050919050565b6000610bd7601083610e72565b91507f496e76616c6964206465766963654944000000000000000000000000000000006000830152602082019050919050565b6000610c17601283610e72565b91507f4e6f7420636f6e7472616374206f776e657200000000000000000000000000006000830152602082019050919050565b6000610c57601383610e72565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b610c9381610ecc565b82525050565b6000610ca58284610ad9565b915081905092915050565b6000602082019050610cc56000830184610a82565b92915050565b6000602082019050610ce06000830184610a91565b92915050565b60006060820190508181036000830152610d008186610aa0565b90508181036020830152610d148185610aa0565b9050610d236040830184610c8a565b949350505050565b60006020820190508181036000830152610d4481610b0a565b9050919050565b60006020820190508181036000830152610d6481610b4a565b9050919050565b60006020820190508181036000830152610d8481610b8a565b9050919050565b60006020820190508181036000830152610da481610bca565b9050919050565b60006020820190508181036000830152610dc481610c0a565b9050919050565b60006020820190508181036000830152610de481610c4a565b9050919050565b6000602082019050610e006000830184610c8a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610e2d57610e2c610f79565b5b8060405250919050565b600067ffffffffffffffff821115610e5257610e51610f79565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e9982610eac565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610f03578082015181840152602081019050610ee8565b83811115610f12576000848401525b50505050565b60006002820490506001821680610f3057607f821691505b60208210811415610f4457610f43610f4a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610fc281610e8e565b8114610fcd57600080fd5b50565b610fd981610ecc565b8114610fe457600080fd5b5056fea26469706673582212206b157383f942affe3e24a9264f29423c7ca830e2abf8779f7f9237884e200bda64736f6c63430008000033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x101D DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FE3C2B2 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6FE3C2B2 EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x933EB9CA EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xD4001EF2 EQ PUSH2 0x16A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1B11092D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x23DFC578 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x30A76B38 EQ PUSH2 0xE4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x186 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0xA2E JUMP JUMPDEST PUSH2 0x1A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x3F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x138 PUSH2 0x4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0xCB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x168 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x504 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH1 0x1 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x205 SWAP1 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH2 0x220 SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x266 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x28F SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x308 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2DD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x308 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2EB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x485 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47C SWAP1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x592 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x589 SWAP1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x670 SWAP1 PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD GT PUSH2 0x6BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B4 SWAP1 PUSH2 0xD8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x701 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F8 SWAP1 PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73C SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x1 DUP5 PUSH1 0x40 MLOAD PUSH2 0x774 SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x7C8 SWAP3 SWAP2 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x7E5 SWAP3 SWAP2 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x804 SWAP1 PUSH2 0xF18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x826 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x86D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x83F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x86D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x86D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x86C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x851 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x87A SWAP2 SWAP1 PUSH2 0x87E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x897 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x87F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE PUSH2 0x8A9 DUP5 PUSH2 0xE37 JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D1 DUP5 DUP3 DUP6 PUSH2 0xED6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8E8 DUP2 PUSH2 0xFB9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x90F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x89B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x927 DUP2 PUSH2 0xFD0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x94D DUP5 DUP3 DUP6 ADD PUSH2 0x8D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x98E DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D2 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9FB DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA24 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA78 DUP6 DUP3 DUP7 ADD PUSH2 0x918 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xA8B DUP2 PUSH2 0xE8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA9A DUP2 PUSH2 0xEA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP3 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0xAB5 DUP2 DUP6 PUSH2 0xE72 JUMP JUMPDEST SWAP4 POP PUSH2 0xAC5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEE5 JUMP JUMPDEST PUSH2 0xACE DUP2 PUSH2 0xFA8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE4 DUP3 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0xAEE DUP2 DUP6 PUSH2 0xE83 JUMP JUMPDEST SWAP4 POP PUSH2 0xAFE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEE5 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB17 PUSH1 0xC DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x556E617574686F72697A65640000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB57 PUSH1 0x10 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C696420646174615479706500000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB97 PUSH1 0xD DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C69642076616C756500000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD7 PUSH1 0x10 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C696420646576696365494400000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC17 PUSH1 0x12 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420636F6E7472616374206F776E65720000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC57 PUSH1 0x13 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC93 DUP2 PUSH2 0xECC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA5 DUP3 DUP5 PUSH2 0xAD9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD00 DUP2 DUP7 PUSH2 0xAA0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD14 DUP2 DUP6 PUSH2 0xAA0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD23 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC8A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD44 DUP2 PUSH2 0xB0A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD64 DUP2 PUSH2 0xB4A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD84 DUP2 PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA4 DUP2 PUSH2 0xBCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDC4 DUP2 PUSH2 0xC0A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE4 DUP2 PUSH2 0xC4A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE00 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC8A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE2D JUMPI PUSH2 0xE2C PUSH2 0xF79 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE52 JUMPI PUSH2 0xE51 PUSH2 0xF79 JUMP JUMPDEST JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE99 DUP3 PUSH2 0xEAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF03 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEE8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF44 JUMPI PUSH2 0xF43 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC2 DUP2 PUSH2 0xE8E JUMP JUMPDEST DUP2 EQ PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xFD9 DUP2 PUSH2 0xECC JUMP JUMPDEST DUP2 EQ PUSH2 0xFE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x157383F942AFFE3E24A9264F 0x29 TIMESTAMP EXTCODECOPY PUSH29 0xA830E2ABF8779F7F9237884E200BDA64736F6C63430008000033000000 ",
		"sourceMap": "60:1720:0:-:0;;;342:51;;;;;;;;;;375:10;367:5;;:18;;;;;;;;;;;;;;;;;;60:1720;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "device",
					"type": "address"
				}
			],
			"name": "authorizeDevice",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "device",
					"type": "address"
				}
			],
			"name": "revokeDevice",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "deviceID",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "dataType",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "value",
					"type": "string"
				}
			],
			"name": "storeData",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "authorizedDevices",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "deviceID",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "index",
					"type": "uint256"
				}
			],
			"name": "getDataByIndex",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "deviceID",
					"type": "string"
				}
			],
			"name": "getDataCount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 10,
				"contract": "IotDataStorage.sol:IoTDataStorage",
				"label": "owner",
				"offset": 0,
				"slot": "0",
				"type": "t_address"
			},
			{
				"astId": 16,
				"contract": "IotDataStorage.sol:IoTDataStorage",
				"label": "deviceData",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_string_memory_ptr,t_array(t_struct(DataEntry)8_storage)dyn_storage)"
			},
			{
				"astId": 20,
				"contract": "IotDataStorage.sol:IoTDataStorage",
				"label": "authorizedDevices",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_address,t_bool)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_struct(DataEntry)8_storage)dyn_storage": {
				"base": "t_struct(DataEntry)8_storage",
				"encoding": "dynamic_array",
				"label": "struct IoTDataStorage.DataEntry[]",
				"numberOfBytes": "32"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_string_memory_ptr,t_array(t_struct(DataEntry)8_storage)dyn_storage)": {
				"encoding": "mapping",
				"key": "t_string_memory_ptr",
				"label": "mapping(string => struct IoTDataStorage.DataEntry[])",
				"numberOfBytes": "32",
				"value": "t_array(t_struct(DataEntry)8_storage)dyn_storage"
			},
			"t_string_memory_ptr": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_struct(DataEntry)8_storage": {
				"encoding": "inplace",
				"label": "struct IoTDataStorage.DataEntry",
				"members": [
					{
						"astId": 3,
						"contract": "IotDataStorage.sol:IoTDataStorage",
						"label": "dataType",
						"offset": 0,
						"slot": "0",
						"type": "t_string_storage"
					},
					{
						"astId": 5,
						"contract": "IotDataStorage.sol:IoTDataStorage",
						"label": "value",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					},
					{
						"astId": 7,
						"contract": "IotDataStorage.sol:IoTDataStorage",
						"label": "timestamp",
						"offset": 0,
						"slot": "2",
						"type": "t_uint256"
					}
				],
				"numberOfBytes": "96"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var iotdatastorageContract = new web3.eth.Contract([{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"authorizeDevice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedDevices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDataByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"}],\"name\":\"getDataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"revokeDevice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"deviceID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"storeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar iotdatastorage = iotdatastorageContract.deploy({\n     data: '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061101d806100606000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636fe3c2b21161005b5780636fe3c2b2146101145780638da5cb5b14610130578063933eb9ca1461014e578063d4001ef21461016a5761007d565b80631b11092d1461008257806323dfc578146100b257806330a76b38146100e4575b600080fd5b61009c6004803603810190610097919061092d565b610186565b6040516100a99190610ccb565b60405180910390f35b6100cc60048036038101906100c79190610a2e565b6101a6565b6040516100db93929190610ce6565b60405180910390f35b6100fe60048036038101906100f99190610956565b6103cc565b60405161010b9190610deb565b60405180910390f35b61012e6004803603810190610129919061092d565b6103f7565b005b6101386104e0565b6040516101459190610cb0565b60405180910390f35b6101686004803603810190610163919061092d565b610504565b005b610184600480360381019061017f9190610997565b6105ed565b005b60026020528060005260406000206000915054906101000a900460ff1681565b60608060006001856040516101bb9190610c99565b908152602001604051809103902080549050841061020e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020590610dcb565b60405180910390fd5b60006001866040516102209190610c99565b90815260200160405180910390208581548110610266577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201805461028f90610f18565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90610f18565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b5050505050815260200160018201805461032190610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610f18565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b60006001826040516103de9190610c99565b9081526020016040518091039020805490509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610dab565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610dab565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610d2b565b60405180910390fd5b60008351116106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610d8b565b60405180910390fd5b6000825111610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890610d4b565b60405180910390fd5b6000815111610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c90610d6b565b60405180910390fd5b600060405180606001604052808481526020018381526020014281525090506001846040516107749190610c99565b908152602001604051809103902081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906107c89291906107f8565b5060208201518160010190805190602001906107e59291906107f8565b5060408201518160020155505050505050565b82805461080490610f18565b90600052602060002090601f016020900481019282610826576000855561086d565b82601f1061083f57805160ff191683800117855561086d565b8280016001018555821561086d579182015b8281111561086c578251825591602001919060010190610851565b5b50905061087a919061087e565b5090565b5b8082111561089757600081600090555060010161087f565b5090565b60006108ae6108a984610e37565b610e06565b9050828152602081018484840111156108c657600080fd5b6108d1848285610ed6565b509392505050565b6000813590506108e881610fb9565b92915050565b600082601f8301126108ff57600080fd5b813561090f84826020860161089b565b91505092915050565b60008135905061092781610fd0565b92915050565b60006020828403121561093f57600080fd5b600061094d848285016108d9565b91505092915050565b60006020828403121561096857600080fd5b600082013567ffffffffffffffff81111561098257600080fd5b61098e848285016108ee565b91505092915050565b6000806000606084860312156109ac57600080fd5b600084013567ffffffffffffffff8111156109c657600080fd5b6109d2868287016108ee565b935050602084013567ffffffffffffffff8111156109ef57600080fd5b6109fb868287016108ee565b925050604084013567ffffffffffffffff811115610a1857600080fd5b610a24868287016108ee565b9150509250925092565b60008060408385031215610a4157600080fd5b600083013567ffffffffffffffff811115610a5b57600080fd5b610a67858286016108ee565b9250506020610a7885828601610918565b9150509250929050565b610a8b81610e8e565b82525050565b610a9a81610ea0565b82525050565b6000610aab82610e67565b610ab58185610e72565b9350610ac5818560208601610ee5565b610ace81610fa8565b840191505092915050565b6000610ae482610e67565b610aee8185610e83565b9350610afe818560208601610ee5565b80840191505092915050565b6000610b17600c83610e72565b91507f556e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000610b57601083610e72565b91507f496e76616c6964206461746154797065000000000000000000000000000000006000830152602082019050919050565b6000610b97600d83610e72565b91507f496e76616c69642076616c7565000000000000000000000000000000000000006000830152602082019050919050565b6000610bd7601083610e72565b91507f496e76616c6964206465766963654944000000000000000000000000000000006000830152602082019050919050565b6000610c17601283610e72565b91507f4e6f7420636f6e7472616374206f776e657200000000000000000000000000006000830152602082019050919050565b6000610c57601383610e72565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b610c9381610ecc565b82525050565b6000610ca58284610ad9565b915081905092915050565b6000602082019050610cc56000830184610a82565b92915050565b6000602082019050610ce06000830184610a91565b92915050565b60006060820190508181036000830152610d008186610aa0565b90508181036020830152610d148185610aa0565b9050610d236040830184610c8a565b949350505050565b60006020820190508181036000830152610d4481610b0a565b9050919050565b60006020820190508181036000830152610d6481610b4a565b9050919050565b60006020820190508181036000830152610d8481610b8a565b9050919050565b60006020820190508181036000830152610da481610bca565b9050919050565b60006020820190508181036000830152610dc481610c0a565b9050919050565b60006020820190508181036000830152610de481610c4a565b9050919050565b6000602082019050610e006000830184610c8a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610e2d57610e2c610f79565b5b8060405250919050565b600067ffffffffffffffff821115610e5257610e51610f79565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e9982610eac565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610f03578082015181840152602081019050610ee8565b83811115610f12576000848401525b50505050565b60006002820490506001821680610f3057607f821691505b60208210811415610f4457610f43610f4a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610fc281610e8e565b8114610fcd57600080fd5b50565b610fd981610ecc565b8114610fe457600080fd5b5056fea26469706673582212206b157383f942affe3e24a9264f29423c7ca830e2abf8779f7f9237884e200bda64736f6c63430008000033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"933eb9ca": "authorizeDevice(address)",
		"1b11092d": "authorizedDevices(address)",
		"23dfc578": "getDataByIndex(string,uint256)",
		"30a76b38": "getDataCount(string)",
		"8da5cb5b": "owner()",
		"6fe3c2b2": "revokeDevice(address)",
		"d4001ef2": "storeData(string,string,string)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "825000",
			"executionCost": "21723",
			"totalCost": "846723"
		},
		"External": {
			"authorizeDevice(address)": "22323",
			"authorizedDevices(address)": "1546",
			"getDataByIndex(string,uint256)": "infinite",
			"getDataCount(string)": "infinite",
			"owner()": "1233",
			"revokeDevice(address)": "22279",
			"storeData(string,string,string)": "infinite"
		}
	},
	"devdoc": {
		"kind": "dev",
		"methods": {},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:13185:1",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "91:260:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "101:74:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "167:6:1"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "125:41:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "125:49:1"
												}
											],
											"functionName": {
												"name": "allocateMemory",
												"nodeType": "YulIdentifier",
												"src": "110:14:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "110:65:1"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "101:5:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "191:5:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "198:6:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "184:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "184:21:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "184:21:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "214:27:1",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "229:5:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "236:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "225:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "225:16:1"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "218:3:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "279:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "288:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "291:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "281:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "281:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "281:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "260:3:1"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "265:6:1"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "256:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "256:16:1"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "274:3:1"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "253:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "253:25:1"
										},
										"nodeType": "YulIf",
										"src": "250:2:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "328:3:1"
												},
												{
													"name": "dst",
													"nodeType": "YulIdentifier",
													"src": "333:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "338:6:1"
												}
											],
											"functionName": {
												"name": "copy_calldata_to_memory",
												"nodeType": "YulIdentifier",
												"src": "304:23:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "304:41:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "304:41:1"
									}
								]
							},
							"name": "abi_decode_available_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "64:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "69:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "77:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "85:5:1",
									"type": ""
								}
							],
							"src": "7:344:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "409:87:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "419:29:1",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "441:6:1"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "428:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "428:20:1"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "419:5:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "484:5:1"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "457:26:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "457:33:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "457:33:1"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "387:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "395:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "403:5:1",
									"type": ""
								}
							],
							"src": "357:139:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "578:211:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "627:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "636:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "639:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "629:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "629:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "629:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "606:6:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "614:4:1",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "602:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "602:17:1"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "621:3:1"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "598:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "598:27:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "591:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "591:35:1"
										},
										"nodeType": "YulIf",
										"src": "588:2:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "652:34:1",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "679:6:1"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "666:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "666:20:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "656:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "695:88:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "756:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "764:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "752:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "752:17:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "771:6:1"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "779:3:1"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "704:47:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "704:79:1"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "695:5:1"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "556:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "564:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "572:5:1",
									"type": ""
								}
							],
							"src": "516:273:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "847:87:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "857:29:1",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "879:6:1"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "866:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "866:20:1"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "857:5:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "922:5:1"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "895:26:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "895:33:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "895:33:1"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "825:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "833:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "841:5:1",
									"type": ""
								}
							],
							"src": "795:139:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1006:196:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1052:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1061:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1064:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1054:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "1054:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1054:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1027:7:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1036:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1023:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1023:23:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1048:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1019:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1019:32:1"
										},
										"nodeType": "YulIf",
										"src": "1016:2:1"
									},
									{
										"nodeType": "YulBlock",
										"src": "1078:117:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1093:15:1",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1107:1:1",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1097:6:1",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1122:63:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1157:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1168:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1153:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1153:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1177:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "1132:20:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1132:53:1"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1122:6:1"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "976:9:1",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "987:7:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "999:6:1",
									"type": ""
								}
							],
							"src": "940:262:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1284:299:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1330:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1339:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1342:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1332:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "1332:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1332:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1305:7:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1314:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1301:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1301:23:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1326:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1297:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1297:32:1"
										},
										"nodeType": "YulIf",
										"src": "1294:2:1"
									},
									{
										"nodeType": "YulBlock",
										"src": "1356:220:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1371:45:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1402:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1413:1:1",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1398:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1398:17:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1385:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1385:31:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1375:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1463:16:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1472:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1475:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1465:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1465:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1465:12:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1435:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1443:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1432:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1432:30:1"
												},
												"nodeType": "YulIf",
												"src": "1429:2:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1493:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1538:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1549:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1534:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1534:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1558:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "1503:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1503:63:1"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1493:6:1"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1254:9:1",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1265:7:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1277:6:1",
									"type": ""
								}
							],
							"src": "1208:375:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1719:761:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1765:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1774:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1777:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1767:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "1767:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1767:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1740:7:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1749:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1736:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1736:23:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1761:2:1",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1732:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1732:32:1"
										},
										"nodeType": "YulIf",
										"src": "1729:2:1"
									},
									{
										"nodeType": "YulBlock",
										"src": "1791:220:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1806:45:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1837:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1848:1:1",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1833:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1833:17:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1820:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1820:31:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1810:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1898:16:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1907:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1910:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1900:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1900:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1900:12:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1870:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1878:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1867:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1867:30:1"
												},
												"nodeType": "YulIf",
												"src": "1864:2:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1928:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1973:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1984:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1969:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1969:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1993:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "1938:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1938:63:1"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1928:6:1"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "2021:221:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2036:46:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2067:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2078:2:1",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2063:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2063:18:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2050:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2050:32:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2040:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2129:16:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2138:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2141:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2131:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2131:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2131:12:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2101:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2109:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2098:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2098:30:1"
												},
												"nodeType": "YulIf",
												"src": "2095:2:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2159:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2204:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2215:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2200:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2200:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2224:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "2169:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2169:63:1"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2159:6:1"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "2252:221:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2267:46:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2298:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2309:2:1",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2294:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2294:18:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2281:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2281:32:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2271:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2360:16:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2369:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2372:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2362:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2362:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2362:12:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2332:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2340:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2329:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2329:30:1"
												},
												"nodeType": "YulIf",
												"src": "2326:2:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2390:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2435:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2446:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2431:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2431:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2455:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "2400:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2400:63:1"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "2390:6:1"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1673:9:1",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1684:7:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1696:6:1",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "1704:6:1",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "1712:6:1",
									"type": ""
								}
							],
							"src": "1589:891:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2579:427:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2625:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2634:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2637:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2627:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2627:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2627:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2600:7:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2609:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2596:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2596:23:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2621:2:1",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2592:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2592:32:1"
										},
										"nodeType": "YulIf",
										"src": "2589:2:1"
									},
									{
										"nodeType": "YulBlock",
										"src": "2651:220:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2666:45:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2697:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2708:1:1",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2693:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2693:17:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2680:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2680:31:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2670:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2758:16:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2767:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2770:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2760:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2760:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2760:12:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2730:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2738:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2727:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2727:30:1"
												},
												"nodeType": "YulIf",
												"src": "2724:2:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2788:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2833:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2844:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2829:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2829:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2853:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "2798:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2798:63:1"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2788:6:1"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "2881:118:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2896:16:1",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2910:2:1",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2900:6:1",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2926:63:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2961:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2972:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2957:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2957:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2981:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "2936:20:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2936:53:1"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2926:6:1"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_string_memory_ptrt_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2541:9:1",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "2552:7:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2564:6:1",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "2572:6:1",
									"type": ""
								}
							],
							"src": "2486:520:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3077:53:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3094:3:1"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3117:5:1"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nodeType": "YulIdentifier",
														"src": "3099:17:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3099:24:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3087:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3087:37:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3087:37:1"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3065:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3072:3:1",
									"type": ""
								}
							],
							"src": "3012:118:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3195:50:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3212:3:1"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3232:5:1"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nodeType": "YulIdentifier",
														"src": "3217:14:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3217:21:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3205:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3205:34:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3205:34:1"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3183:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3190:3:1",
									"type": ""
								}
							],
							"src": "3136:109:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3343:272:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3353:53:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3400:5:1"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3367:32:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3367:39:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "3357:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3415:78:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3481:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3486:6:1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3422:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3422:71:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "3415:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3528:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3535:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3524:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3524:16:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3542:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3547:6:1"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory",
												"nodeType": "YulIdentifier",
												"src": "3502:21:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3502:52:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3502:52:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3563:46:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3574:3:1"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3601:6:1"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "3579:21:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3579:29:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3570:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3570:39:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "3563:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3324:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3331:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3339:3:1",
									"type": ""
								}
							],
							"src": "3251:364:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3731:267:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3741:53:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3788:5:1"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3755:32:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3755:39:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "3745:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3803:96:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3887:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3892:6:1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3810:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3810:89:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "3803:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3934:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3941:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3930:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3930:16:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3948:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3953:6:1"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory",
												"nodeType": "YulIdentifier",
												"src": "3908:21:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3908:52:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3908:52:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3969:23:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3980:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3985:6:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3976:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3976:16:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "3969:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3712:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3719:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3727:3:1",
									"type": ""
								}
							],
							"src": "3621:377:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4150:164:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4160:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4226:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4231:2:1",
													"type": "",
													"value": "12"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4167:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4167:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "4160:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "4255:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4260:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4251:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4251:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "4264:14:1",
													"type": "",
													"value": "Unauthorized"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4244:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4244:35:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4244:35:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4289:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4300:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4305:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4296:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4296:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "4289:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4138:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4146:3:1",
									"type": ""
								}
							],
							"src": "4004:310:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4466:168:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4476:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4542:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4547:2:1",
													"type": "",
													"value": "16"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4483:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4483:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "4476:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "4571:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4576:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4567:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4567:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "4580:18:1",
													"type": "",
													"value": "Invalid dataType"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4560:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4560:39:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4560:39:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4609:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4620:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4625:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4616:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4616:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "4609:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4454:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4462:3:1",
									"type": ""
								}
							],
							"src": "4320:314:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4786:165:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4796:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4862:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4867:2:1",
													"type": "",
													"value": "13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4803:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4803:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "4796:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "4891:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4896:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4887:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4887:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "4900:15:1",
													"type": "",
													"value": "Invalid value"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4880:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4880:36:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4880:36:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4926:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4937:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4942:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4933:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4933:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "4926:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4774:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4782:3:1",
									"type": ""
								}
							],
							"src": "4640:311:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5103:168:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5113:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5179:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5184:2:1",
													"type": "",
													"value": "16"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5120:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5120:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "5113:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "5208:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5213:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5204:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5204:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "5217:18:1",
													"type": "",
													"value": "Invalid deviceID"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5197:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5197:39:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5197:39:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5246:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5257:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5262:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5253:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5253:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "5246:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5091:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "5099:3:1",
									"type": ""
								}
							],
							"src": "4957:314:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5423:170:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5433:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5499:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5504:2:1",
													"type": "",
													"value": "18"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5440:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5440:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "5433:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "5528:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5533:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5524:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5524:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "5537:20:1",
													"type": "",
													"value": "Not contract owner"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5517:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5517:41:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5517:41:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5568:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5579:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5584:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5575:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5575:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "5568:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5411:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "5419:3:1",
									"type": ""
								}
							],
							"src": "5277:316:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5745:171:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5755:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5821:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5826:2:1",
													"type": "",
													"value": "19"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5762:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5762:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "5755:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "5850:3:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5855:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5846:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5846:11:1"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "5859:21:1",
													"type": "",
													"value": "Index out of bounds"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5839:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5839:42:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5839:42:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5891:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5902:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5907:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5898:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5898:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "5891:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5733:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "5741:3:1",
									"type": ""
								}
							],
							"src": "5599:317:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5987:53:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6004:3:1"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "6027:5:1"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "6009:17:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "6009:24:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5997:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5997:37:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5997:37:1"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "5975:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5982:3:1",
									"type": ""
								}
							],
							"src": "5922:118:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6182:139:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6193:102:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "6282:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6291:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "6200:81:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6200:95:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "6193:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6305:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "6312:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "6305:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6161:3:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6167:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "6178:3:1",
									"type": ""
								}
							],
							"src": "6046:275:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6425:124:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6435:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "6447:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6458:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6443:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6443:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6435:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "6515:6:1"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6528:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6539:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6524:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "6524:17:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "6471:43:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6471:71:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6471:71:1"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "6397:9:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6409:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "6420:4:1",
									"type": ""
								}
							],
							"src": "6327:222:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6647:118:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6657:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "6669:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6680:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6665:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6665:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6657:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "6731:6:1"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6744:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6755:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6740:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "6740:17:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulIdentifier",
												"src": "6693:37:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6693:65:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6693:65:1"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "6619:9:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6631:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "6642:4:1",
									"type": ""
								}
							],
							"src": "6555:210:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6965:430:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6975:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "6987:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6998:2:1",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6983:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6983:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6975:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7022:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7033:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7018:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7018:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "7041:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7047:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7037:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7037:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7011:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7011:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7011:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7067:86:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "7139:6:1"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7148:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7075:63:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7075:78:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7067:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7174:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7185:2:1",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7170:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7170:18:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "7194:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7200:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7190:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7190:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7163:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7163:48:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7163:48:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7220:86:1",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "7292:6:1"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7301:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7228:63:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7228:78:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7220:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "7360:6:1"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7373:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7384:2:1",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7369:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7369:18:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7316:43:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7316:72:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7316:72:1"
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "6921:9:1",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "6933:6:1",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "6941:6:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6949:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "6960:4:1",
									"type": ""
								}
							],
							"src": "6771:624:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7572:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7582:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7594:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7605:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7590:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7590:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7582:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7629:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7640:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7625:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7625:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "7648:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7654:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7644:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7644:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7618:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7618:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7618:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7674:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7808:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7682:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7682:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7674:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7552:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "7567:4:1",
									"type": ""
								}
							],
							"src": "7401:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7997:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8007:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "8019:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8030:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8015:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8015:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8007:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8054:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8065:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8050:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8050:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "8073:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8079:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "8069:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8069:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8043:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8043:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8043:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8099:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "8233:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8107:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8107:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8099:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7977:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "7992:4:1",
									"type": ""
								}
							],
							"src": "7826:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8422:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8432:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "8444:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8455:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8440:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8440:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8432:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8479:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8490:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8475:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8475:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "8498:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8504:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "8494:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8494:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8468:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8468:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8468:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8524:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "8658:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8532:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8532:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8524:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "8402:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "8417:4:1",
									"type": ""
								}
							],
							"src": "8251:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8847:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8857:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "8869:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8880:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8865:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8865:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8857:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8904:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8915:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8900:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8900:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "8923:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8929:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "8919:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8919:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8893:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8893:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8893:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8949:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "9083:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8957:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8957:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8949:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "8827:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "8842:4:1",
									"type": ""
								}
							],
							"src": "8676:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9272:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9282:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "9294:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9305:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9290:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9290:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9282:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9329:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9340:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9325:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9325:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "9348:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9354:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "9344:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9344:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9318:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9318:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9318:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9374:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "9508:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9382:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9382:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9374:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "9252:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "9267:4:1",
									"type": ""
								}
							],
							"src": "9101:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9697:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9707:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "9719:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9730:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9715:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9715:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9707:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9754:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9765:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9750:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9750:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "9773:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9779:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "9769:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9769:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9743:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9743:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9743:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9799:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "9933:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9807:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9807:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9799:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "9677:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "9692:4:1",
									"type": ""
								}
							],
							"src": "9526:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10049:124:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10059:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "10071:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10082:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10067:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10067:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "10059:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "10139:6:1"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10152:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10163:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10148:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10148:17:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "10095:43:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10095:71:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10095:71:1"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "10021:9:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "10033:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "10044:4:1",
									"type": ""
								}
							],
							"src": "9951:222:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10219:243:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10229:19:1",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10245:2:1",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "10239:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10239:9:1"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "10229:6:1"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "10257:35:1",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "10279:6:1"
												},
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "10287:4:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10275:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10275:17:1"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nodeType": "YulTypedName",
												"src": "10261:10:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10403:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "10405:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "10405:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10405:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "10346:10:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10358:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "10343:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10343:34:1"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "10382:10:1"
														},
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10394:6:1"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "10379:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10379:22:1"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "10340:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10340:62:1"
										},
										"nodeType": "YulIf",
										"src": "10337:2:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10441:2:1",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nodeType": "YulIdentifier",
													"src": "10445:10:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10434:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10434:22:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10434:22:1"
									}
								]
							},
							"name": "allocateMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "10203:4:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "10212:6:1",
									"type": ""
								}
							],
							"src": "10179:283:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10535:265:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10640:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "10642:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "10642:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10642:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "10612:6:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10620:18:1",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "10609:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10609:30:1"
										},
										"nodeType": "YulIf",
										"src": "10606:2:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10692:41:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "10708:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10716:4:1",
															"type": "",
															"value": "0x1f"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10704:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10704:17:1"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10727:4:1",
															"type": "",
															"value": "0x1f"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "10723:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10723:9:1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "10700:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10700:33:1"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "10692:4:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10770:23:1",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "10782:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10788:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10778:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10778:15:1"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "10770:4:1"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "10519:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "10530:4:1",
									"type": ""
								}
							],
							"src": "10468:332:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10865:40:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10876:22:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "10892:5:1"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "10886:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10886:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "10876:6:1"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "10848:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "10858:6:1",
									"type": ""
								}
							],
							"src": "10806:99:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11007:73:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11024:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11029:6:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11017:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11017:19:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11017:19:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11045:29:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11064:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11069:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "11060:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11060:14:1"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "11045:11:1"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "10979:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "10984:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "10995:11:1",
									"type": ""
								}
							],
							"src": "10911:169:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11200:34:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11210:18:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "11225:3:1"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "11210:11:1"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "11172:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "11177:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "11188:11:1",
									"type": ""
								}
							],
							"src": "11086:148:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11285:51:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11295:35:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "11324:5:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "11306:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11306:24:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "11295:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11267:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "11277:7:1",
									"type": ""
								}
							],
							"src": "11240:96:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11384:48:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11394:32:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "11419:5:1"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "11412:6:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "11412:13:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "11405:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11405:21:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "11394:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11366:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "11376:7:1",
									"type": ""
								}
							],
							"src": "11342:90:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11483:81:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11493:65:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "11508:5:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11515:42:1",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "11504:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11504:54:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "11493:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11465:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "11475:7:1",
									"type": ""
								}
							],
							"src": "11438:126:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11615:32:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11625:16:1",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "11636:5:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "11625:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11597:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "11607:7:1",
									"type": ""
								}
							],
							"src": "11570:77:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11704:103:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nodeType": "YulIdentifier",
													"src": "11727:3:1"
												},
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "11732:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11737:6:1"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nodeType": "YulIdentifier",
												"src": "11714:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11714:30:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11714:30:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "11785:3:1"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "11790:6:1"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11781:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "11781:16:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11799:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11774:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11774:27:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11774:27:1"
									}
								]
							},
							"name": "copy_calldata_to_memory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "11686:3:1",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "11691:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "11696:6:1",
									"type": ""
								}
							],
							"src": "11653:154:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11862:258:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "11872:10:1",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "11881:1:1",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nodeType": "YulTypedName",
												"src": "11876:1:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "11941:63:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "11966:3:1"
																	},
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11971:1:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11962:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11962:11:1"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "11985:3:1"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "11990:1:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11981:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11981:11:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11975:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11975:18:1"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "11955:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "11955:39:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "11955:39:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "11902:1:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11905:6:1"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "11899:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11899:13:1"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "11913:19:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "11915:15:1",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "11924:1:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11927:2:1",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "11920:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "11920:10:1"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "11915:1:1"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "11895:3:1",
											"statements": []
										},
										"src": "11891:113:1"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12038:76:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "12088:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12093:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12084:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12084:16:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12102:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "12077:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "12077:27:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12077:27:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "12019:1:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "12022:6:1"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "12016:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12016:13:1"
										},
										"nodeType": "YulIf",
										"src": "12013:2:1"
									}
								]
							},
							"name": "copy_memory_to_memory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "11844:3:1",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "11849:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "11854:6:1",
									"type": ""
								}
							],
							"src": "11813:307:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12177:269:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12187:22:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "12201:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12207:1:1",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "12197:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12197:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "12187:6:1"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "12218:38:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "12248:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12254:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "12244:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12244:12:1"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "12222:18:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12295:51:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "12309:27:1",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "12323:6:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12331:4:1",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "12319:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "12319:17:1"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12309:6:1"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "12275:18:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "12268:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12268:26:1"
										},
										"nodeType": "YulIf",
										"src": "12265:2:1"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12398:42:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nodeType": "YulIdentifier",
															"src": "12412:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "12412:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12412:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "12362:18:1"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12385:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12393:2:1",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "12382:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "12382:14:1"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "12359:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12359:38:1"
										},
										"nodeType": "YulIf",
										"src": "12356:2:1"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "12161:4:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "12170:6:1",
									"type": ""
								}
							],
							"src": "12126:320:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12480:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12497:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12500:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12490:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12490:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12490:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12594:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12597:4:1",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12587:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12587:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12587:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12618:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12621:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "12611:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12611:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12611:15:1"
									}
								]
							},
							"name": "panic_error_0x22",
							"nodeType": "YulFunctionDefinition",
							"src": "12452:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12666:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12683:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12686:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12676:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12676:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12676:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12780:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12783:4:1",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12773:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12773:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12773:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12804:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12807:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "12797:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12797:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12797:15:1"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "12638:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12872:54:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12882:38:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "12900:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12907:2:1",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12896:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "12896:14:1"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12916:2:1",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "12912:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "12912:7:1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "12892:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12892:28:1"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "12882:6:1"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "12855:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "12865:6:1",
									"type": ""
								}
							],
							"src": "12824:102:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12975:79:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "13032:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13041:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13044:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "13034:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "13034:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13034:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "12998:5:1"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "13023:5:1"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "13005:17:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "13005:24:1"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "12995:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "12995:35:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "12988:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12988:43:1"
										},
										"nodeType": "YulIf",
										"src": "12985:2:1"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "12968:5:1",
									"type": ""
								}
							],
							"src": "12932:122:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13103:79:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "13160:16:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13169:1:1",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13172:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "13162:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "13162:12:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13162:12:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "13126:5:1"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "13151:5:1"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "13133:17:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "13133:24:1"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "13123:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "13123:35:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "13116:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13116:43:1"
										},
										"nodeType": "YulIf",
										"src": "13113:2:1"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "13096:5:1",
									"type": ""
								}
							],
							"src": "13060:122:1"
						}
					]
				},
				"contents": "{\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocateMemory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n\n        mstore(add(pos, 0), \"Unauthorized\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n\n        mstore(add(pos, 0), \"Invalid dataType\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n\n        mstore(add(pos, 0), \"Invalid value\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n\n        mstore(add(pos, 0), \"Invalid deviceID\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n\n        mstore(add(pos, 0), \"Not contract owner\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n\n        mstore(add(pos, 0), \"Index out of bounds\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9fa8584e8ab348a7671c72aa64d76fbca63ef4bf2064de47e0562edcb2fef6d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a06538b932a313089ae566efd0e7e26dd4e72c52e77044e966d0526f069591e6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b18053e8c84584248dc5f4895af97952178e864d8582712baca7e23cc3b585a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b96e70b7a3557179a7b71db6ec63e73fe5d7c3a0c6fbb3047ffe9badd22aa805_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocateMemory(size) -> memPtr {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        // round up\n        size := and(add(length, 0x1f), not(0x1f))\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
				"id": 1,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c80636fe3c2b21161005b5780636fe3c2b2146101145780638da5cb5b14610130578063933eb9ca1461014e578063d4001ef21461016a5761007d565b80631b11092d1461008257806323dfc578146100b257806330a76b38146100e4575b600080fd5b61009c6004803603810190610097919061092d565b610186565b6040516100a99190610ccb565b60405180910390f35b6100cc60048036038101906100c79190610a2e565b6101a6565b6040516100db93929190610ce6565b60405180910390f35b6100fe60048036038101906100f99190610956565b6103cc565b60405161010b9190610deb565b60405180910390f35b61012e6004803603810190610129919061092d565b6103f7565b005b6101386104e0565b6040516101459190610cb0565b60405180910390f35b6101686004803603810190610163919061092d565b610504565b005b610184600480360381019061017f9190610997565b6105ed565b005b60026020528060005260406000206000915054906101000a900460ff1681565b60608060006001856040516101bb9190610c99565b908152602001604051809103902080549050841061020e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020590610dcb565b60405180910390fd5b60006001866040516102209190610c99565b90815260200160405180910390208581548110610266577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201805461028f90610f18565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90610f18565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b5050505050815260200160018201805461032190610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610f18565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b60006001826040516103de9190610c99565b9081526020016040518091039020805490509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610dab565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610dab565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610d2b565b60405180910390fd5b60008351116106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610d8b565b60405180910390fd5b6000825111610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890610d4b565b60405180910390fd5b6000815111610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c90610d6b565b60405180910390fd5b600060405180606001604052808481526020018381526020014281525090506001846040516107749190610c99565b908152602001604051809103902081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906107c89291906107f8565b5060208201518160010190805190602001906107e59291906107f8565b5060408201518160020155505050505050565b82805461080490610f18565b90600052602060002090601f016020900481019282610826576000855561086d565b82601f1061083f57805160ff191683800117855561086d565b8280016001018555821561086d579182015b8281111561086c578251825591602001919060010190610851565b5b50905061087a919061087e565b5090565b5b8082111561089757600081600090555060010161087f565b5090565b60006108ae6108a984610e37565b610e06565b9050828152602081018484840111156108c657600080fd5b6108d1848285610ed6565b509392505050565b6000813590506108e881610fb9565b92915050565b600082601f8301126108ff57600080fd5b813561090f84826020860161089b565b91505092915050565b60008135905061092781610fd0565b92915050565b60006020828403121561093f57600080fd5b600061094d848285016108d9565b91505092915050565b60006020828403121561096857600080fd5b600082013567ffffffffffffffff81111561098257600080fd5b61098e848285016108ee565b91505092915050565b6000806000606084860312156109ac57600080fd5b600084013567ffffffffffffffff8111156109c657600080fd5b6109d2868287016108ee565b935050602084013567ffffffffffffffff8111156109ef57600080fd5b6109fb868287016108ee565b925050604084013567ffffffffffffffff811115610a1857600080fd5b610a24868287016108ee565b9150509250925092565b60008060408385031215610a4157600080fd5b600083013567ffffffffffffffff811115610a5b57600080fd5b610a67858286016108ee565b9250506020610a7885828601610918565b9150509250929050565b610a8b81610e8e565b82525050565b610a9a81610ea0565b82525050565b6000610aab82610e67565b610ab58185610e72565b9350610ac5818560208601610ee5565b610ace81610fa8565b840191505092915050565b6000610ae482610e67565b610aee8185610e83565b9350610afe818560208601610ee5565b80840191505092915050565b6000610b17600c83610e72565b91507f556e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000610b57601083610e72565b91507f496e76616c6964206461746154797065000000000000000000000000000000006000830152602082019050919050565b6000610b97600d83610e72565b91507f496e76616c69642076616c7565000000000000000000000000000000000000006000830152602082019050919050565b6000610bd7601083610e72565b91507f496e76616c6964206465766963654944000000000000000000000000000000006000830152602082019050919050565b6000610c17601283610e72565b91507f4e6f7420636f6e7472616374206f776e657200000000000000000000000000006000830152602082019050919050565b6000610c57601383610e72565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b610c9381610ecc565b82525050565b6000610ca58284610ad9565b915081905092915050565b6000602082019050610cc56000830184610a82565b92915050565b6000602082019050610ce06000830184610a91565b92915050565b60006060820190508181036000830152610d008186610aa0565b90508181036020830152610d148185610aa0565b9050610d236040830184610c8a565b949350505050565b60006020820190508181036000830152610d4481610b0a565b9050919050565b60006020820190508181036000830152610d6481610b4a565b9050919050565b60006020820190508181036000830152610d8481610b8a565b9050919050565b60006020820190508181036000830152610da481610bca565b9050919050565b60006020820190508181036000830152610dc481610c0a565b9050919050565b60006020820190508181036000830152610de481610c4a565b9050919050565b6000602082019050610e006000830184610c8a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610e2d57610e2c610f79565b5b8060405250919050565b600067ffffffffffffffff821115610e5257610e51610f79565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e9982610eac565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610f03578082015181840152602081019050610ee8565b83811115610f12576000848401525b50505050565b60006002820490506001821680610f3057607f821691505b60208210811415610f4457610f43610f4a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610fc281610e8e565b8114610fcd57600080fd5b50565b610fd981610ecc565b8114610fe457600080fd5b5056fea26469706673582212206b157383f942affe3e24a9264f29423c7ca830e2abf8779f7f9237884e200bda64736f6c63430008000033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FE3C2B2 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6FE3C2B2 EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x933EB9CA EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xD4001EF2 EQ PUSH2 0x16A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1B11092D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x23DFC578 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x30A76B38 EQ PUSH2 0xE4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x186 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0xA2E JUMP JUMPDEST PUSH2 0x1A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x3F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x138 PUSH2 0x4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0xCB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x168 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x92D JUMP JUMPDEST PUSH2 0x504 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH1 0x1 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x205 SWAP1 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH2 0x220 SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x266 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x28F SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x308 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2DD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x308 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2EB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x485 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47C SWAP1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x592 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x589 SWAP1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x670 SWAP1 PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD GT PUSH2 0x6BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B4 SWAP1 PUSH2 0xD8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x701 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F8 SWAP1 PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73C SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x1 DUP5 PUSH1 0x40 MLOAD PUSH2 0x774 SWAP2 SWAP1 PUSH2 0xC99 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x7C8 SWAP3 SWAP2 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x7E5 SWAP3 SWAP2 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x804 SWAP1 PUSH2 0xF18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x826 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x86D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x83F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x86D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x86D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x86C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x851 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x87A SWAP2 SWAP1 PUSH2 0x87E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x897 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x87F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE PUSH2 0x8A9 DUP5 PUSH2 0xE37 JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D1 DUP5 DUP3 DUP6 PUSH2 0xED6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8E8 DUP2 PUSH2 0xFB9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x90F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x89B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x927 DUP2 PUSH2 0xFD0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x94D DUP5 DUP3 DUP6 ADD PUSH2 0x8D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x98E DUP5 DUP3 DUP6 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D2 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9FB DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA24 DUP7 DUP3 DUP8 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x8EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA78 DUP6 DUP3 DUP7 ADD PUSH2 0x918 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xA8B DUP2 PUSH2 0xE8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA9A DUP2 PUSH2 0xEA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP3 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0xAB5 DUP2 DUP6 PUSH2 0xE72 JUMP JUMPDEST SWAP4 POP PUSH2 0xAC5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEE5 JUMP JUMPDEST PUSH2 0xACE DUP2 PUSH2 0xFA8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE4 DUP3 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0xAEE DUP2 DUP6 PUSH2 0xE83 JUMP JUMPDEST SWAP4 POP PUSH2 0xAFE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xEE5 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB17 PUSH1 0xC DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x556E617574686F72697A65640000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB57 PUSH1 0x10 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C696420646174615479706500000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB97 PUSH1 0xD DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C69642076616C756500000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD7 PUSH1 0x10 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C696420646576696365494400000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC17 PUSH1 0x12 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420636F6E7472616374206F776E65720000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC57 PUSH1 0x13 DUP4 PUSH2 0xE72 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC93 DUP2 PUSH2 0xECC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA5 DUP3 DUP5 PUSH2 0xAD9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD00 DUP2 DUP7 PUSH2 0xAA0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD14 DUP2 DUP6 PUSH2 0xAA0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD23 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC8A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD44 DUP2 PUSH2 0xB0A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD64 DUP2 PUSH2 0xB4A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD84 DUP2 PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA4 DUP2 PUSH2 0xBCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDC4 DUP2 PUSH2 0xC0A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE4 DUP2 PUSH2 0xC4A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE00 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC8A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE2D JUMPI PUSH2 0xE2C PUSH2 0xF79 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE52 JUMPI PUSH2 0xE51 PUSH2 0xF79 JUMP JUMPDEST JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE99 DUP3 PUSH2 0xEAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF03 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEE8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF44 JUMPI PUSH2 0xF43 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFC2 DUP2 PUSH2 0xE8E JUMP JUMPDEST DUP2 EQ PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xFD9 DUP2 PUSH2 0xECC JUMP JUMPDEST DUP2 EQ PUSH2 0xFE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x157383F942AFFE3E24A9264F 0x29 TIMESTAMP EXTCODECOPY PUSH29 0xA830E2ABF8779F7F9237884E200BDA64736F6C63430008000033000000 ",
		"sourceMap": "60:1720:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;284:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:336;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;1304:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;747:107;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;201:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;630:109;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;862:434;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;284:49;;;;;;;;;;;;;;;;;;;;;;:::o;1441:336::-;1525:13;1540;1555:7;1591:10;1602:8;1591:20;;;;;;:::i;:::-;;;;;;;;;;;;;:27;;;;1583:5;:35;1575:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;1653:22;1678:10;1689:8;1678:20;;;;;;:::i;:::-;;;;;;;;;;;;;1699:5;1678:27;;;;;;;;;;;;;;;;;;;;;;;;;;1653:52;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1724:5;:14;;;1740:5;:11;;;1753:5;:15;;;1716:53;;;;;;;1441:336;;;;;:::o;1304:129::-;1371:7;1398:10;1409:8;1398:20;;;;;;:::i;:::-;;;;;;;;;;;;;:27;;;;1391:34;;1304:129;;;:::o;747:107::-;455:5;;;;;;;;;;441:19;;:10;:19;;;433:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;841:5:::1;813:17;:25;831:6;813:25;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;747:107:::0;:::o;201:20::-;;;;;;;;;;;;:::o;630:109::-;455:5;;;;;;;;;;441:19;;:10;:19;;;433:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;727:4:::1;699:17;:25;717:6;699:25;;;;;;;;;;;;;;;;:32;;;;;;;;;;;;;;;;;;630:109:::0;:::o;862:434::-;556:17;:29;574:10;556:29;;;;;;;;;;;;;;;;;;;;;;;;;548:54;;;;;;;;;;;;:::i;:::-;;;;;;;;;1016:1:::1;997:8;991:22;:26;983:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1082:1;1063:8;1057:22;:26;1049:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1145:1;1129:5;1123:19;:23;1115:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;1177:22;1202:43;;;;;;;;1212:8;1202:43;;;;1222:5;1202:43;;;;1229:15;1202:43;;::::0;1177:68:::1;;1256:10;1267:8;1256:20;;;;;;:::i;:::-;;;;;;;;;;;;;1282:5;1256:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;613:1;862:434:::0;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:344:1:-;;110:65;125:49;167:6;125:49;:::i;:::-;110:65;:::i;:::-;101:74;;198:6;191:5;184:21;236:4;229:5;225:16;274:3;265:6;260:3;256:16;253:25;250:2;;;291:1;288;281:12;250:2;304:41;338:6;333:3;328;304:41;:::i;:::-;91:260;;;;;;:::o;357:139::-;;441:6;428:20;419:29;;457:33;484:5;457:33;:::i;:::-;409:87;;;;:::o;516:273::-;;621:3;614:4;606:6;602:17;598:27;588:2;;639:1;636;629:12;588:2;679:6;666:20;704:79;779:3;771:6;764:4;756:6;752:17;704:79;:::i;:::-;695:88;;578:211;;;;;:::o;795:139::-;;879:6;866:20;857:29;;895:33;922:5;895:33;:::i;:::-;847:87;;;;:::o;940:262::-;;1048:2;1036:9;1027:7;1023:23;1019:32;1016:2;;;1064:1;1061;1054:12;1016:2;1107:1;1132:53;1177:7;1168:6;1157:9;1153:22;1132:53;:::i;:::-;1122:63;;1078:117;1006:196;;;;:::o;1208:375::-;;1326:2;1314:9;1305:7;1301:23;1297:32;1294:2;;;1342:1;1339;1332:12;1294:2;1413:1;1402:9;1398:17;1385:31;1443:18;1435:6;1432:30;1429:2;;;1475:1;1472;1465:12;1429:2;1503:63;1558:7;1549:6;1538:9;1534:22;1503:63;:::i;:::-;1493:73;;1356:220;1284:299;;;;:::o;1589:891::-;;;;1761:2;1749:9;1740:7;1736:23;1732:32;1729:2;;;1777:1;1774;1767:12;1729:2;1848:1;1837:9;1833:17;1820:31;1878:18;1870:6;1867:30;1864:2;;;1910:1;1907;1900:12;1864:2;1938:63;1993:7;1984:6;1973:9;1969:22;1938:63;:::i;:::-;1928:73;;1791:220;2078:2;2067:9;2063:18;2050:32;2109:18;2101:6;2098:30;2095:2;;;2141:1;2138;2131:12;2095:2;2169:63;2224:7;2215:6;2204:9;2200:22;2169:63;:::i;:::-;2159:73;;2021:221;2309:2;2298:9;2294:18;2281:32;2340:18;2332:6;2329:30;2326:2;;;2372:1;2369;2362:12;2326:2;2400:63;2455:7;2446:6;2435:9;2431:22;2400:63;:::i;:::-;2390:73;;2252:221;1719:761;;;;;:::o;2486:520::-;;;2621:2;2609:9;2600:7;2596:23;2592:32;2589:2;;;2637:1;2634;2627:12;2589:2;2708:1;2697:9;2693:17;2680:31;2738:18;2730:6;2727:30;2724:2;;;2770:1;2767;2760:12;2724:2;2798:63;2853:7;2844:6;2833:9;2829:22;2798:63;:::i;:::-;2788:73;;2651:220;2910:2;2936:53;2981:7;2972:6;2961:9;2957:22;2936:53;:::i;:::-;2926:63;;2881:118;2579:427;;;;;:::o;3012:118::-;3099:24;3117:5;3099:24;:::i;:::-;3094:3;3087:37;3077:53;;:::o;3136:109::-;3217:21;3232:5;3217:21;:::i;:::-;3212:3;3205:34;3195:50;;:::o;3251:364::-;;3367:39;3400:5;3367:39;:::i;:::-;3422:71;3486:6;3481:3;3422:71;:::i;:::-;3415:78;;3502:52;3547:6;3542:3;3535:4;3528:5;3524:16;3502:52;:::i;:::-;3579:29;3601:6;3579:29;:::i;:::-;3574:3;3570:39;3563:46;;3343:272;;;;;:::o;3621:377::-;;3755:39;3788:5;3755:39;:::i;:::-;3810:89;3892:6;3887:3;3810:89;:::i;:::-;3803:96;;3908:52;3953:6;3948:3;3941:4;3934:5;3930:16;3908:52;:::i;:::-;3985:6;3980:3;3976:16;3969:23;;3731:267;;;;;:::o;4004:310::-;;4167:67;4231:2;4226:3;4167:67;:::i;:::-;4160:74;;4264:14;4260:1;4255:3;4251:11;4244:35;4305:2;4300:3;4296:12;4289:19;;4150:164;;;:::o;4320:314::-;;4483:67;4547:2;4542:3;4483:67;:::i;:::-;4476:74;;4580:18;4576:1;4571:3;4567:11;4560:39;4625:2;4620:3;4616:12;4609:19;;4466:168;;;:::o;4640:311::-;;4803:67;4867:2;4862:3;4803:67;:::i;:::-;4796:74;;4900:15;4896:1;4891:3;4887:11;4880:36;4942:2;4937:3;4933:12;4926:19;;4786:165;;;:::o;4957:314::-;;5120:67;5184:2;5179:3;5120:67;:::i;:::-;5113:74;;5217:18;5213:1;5208:3;5204:11;5197:39;5262:2;5257:3;5253:12;5246:19;;5103:168;;;:::o;5277:316::-;;5440:67;5504:2;5499:3;5440:67;:::i;:::-;5433:74;;5537:20;5533:1;5528:3;5524:11;5517:41;5584:2;5579:3;5575:12;5568:19;;5423:170;;;:::o;5599:317::-;;5762:67;5826:2;5821:3;5762:67;:::i;:::-;5755:74;;5859:21;5855:1;5850:3;5846:11;5839:42;5907:2;5902:3;5898:12;5891:19;;5745:171;;;:::o;5922:118::-;6009:24;6027:5;6009:24;:::i;:::-;6004:3;5997:37;5987:53;;:::o;6046:275::-;;6200:95;6291:3;6282:6;6200:95;:::i;:::-;6193:102;;6312:3;6305:10;;6182:139;;;;:::o;6327:222::-;;6458:2;6447:9;6443:18;6435:26;;6471:71;6539:1;6528:9;6524:17;6515:6;6471:71;:::i;:::-;6425:124;;;;:::o;6555:210::-;;6680:2;6669:9;6665:18;6657:26;;6693:65;6755:1;6744:9;6740:17;6731:6;6693:65;:::i;:::-;6647:118;;;;:::o;6771:624::-;;6998:2;6987:9;6983:18;6975:26;;7047:9;7041:4;7037:20;7033:1;7022:9;7018:17;7011:47;7075:78;7148:4;7139:6;7075:78;:::i;:::-;7067:86;;7200:9;7194:4;7190:20;7185:2;7174:9;7170:18;7163:48;7228:78;7301:4;7292:6;7228:78;:::i;:::-;7220:86;;7316:72;7384:2;7373:9;7369:18;7360:6;7316:72;:::i;:::-;6965:430;;;;;;:::o;7401:419::-;;7605:2;7594:9;7590:18;7582:26;;7654:9;7648:4;7644:20;7640:1;7629:9;7625:17;7618:47;7682:131;7808:4;7682:131;:::i;:::-;7674:139;;7572:248;;;:::o;7826:419::-;;8030:2;8019:9;8015:18;8007:26;;8079:9;8073:4;8069:20;8065:1;8054:9;8050:17;8043:47;8107:131;8233:4;8107:131;:::i;:::-;8099:139;;7997:248;;;:::o;8251:419::-;;8455:2;8444:9;8440:18;8432:26;;8504:9;8498:4;8494:20;8490:1;8479:9;8475:17;8468:47;8532:131;8658:4;8532:131;:::i;:::-;8524:139;;8422:248;;;:::o;8676:419::-;;8880:2;8869:9;8865:18;8857:26;;8929:9;8923:4;8919:20;8915:1;8904:9;8900:17;8893:47;8957:131;9083:4;8957:131;:::i;:::-;8949:139;;8847:248;;;:::o;9101:419::-;;9305:2;9294:9;9290:18;9282:26;;9354:9;9348:4;9344:20;9340:1;9329:9;9325:17;9318:47;9382:131;9508:4;9382:131;:::i;:::-;9374:139;;9272:248;;;:::o;9526:419::-;;9730:2;9719:9;9715:18;9707:26;;9779:9;9773:4;9769:20;9765:1;9754:9;9750:17;9743:47;9807:131;9933:4;9807:131;:::i;:::-;9799:139;;9697:248;;;:::o;9951:222::-;;10082:2;10071:9;10067:18;10059:26;;10095:71;10163:1;10152:9;10148:17;10139:6;10095:71;:::i;:::-;10049:124;;;;:::o;10179:283::-;;10245:2;10239:9;10229:19;;10287:4;10279:6;10275:17;10394:6;10382:10;10379:22;10358:18;10346:10;10343:34;10340:62;10337:2;;;10405:18;;:::i;:::-;10337:2;10445:10;10441:2;10434:22;10219:243;;;;:::o;10468:332::-;;10620:18;10612:6;10609:30;10606:2;;;10642:18;;:::i;:::-;10606:2;10727:4;10723:9;10716:4;10708:6;10704:17;10700:33;10692:41;;10788:4;10782;10778:15;10770:23;;10535:265;;;:::o;10806:99::-;;10892:5;10886:12;10876:22;;10865:40;;;:::o;10911:169::-;;11029:6;11024:3;11017:19;11069:4;11064:3;11060:14;11045:29;;11007:73;;;;:::o;11086:148::-;;11225:3;11210:18;;11200:34;;;;:::o;11240:96::-;;11306:24;11324:5;11306:24;:::i;:::-;11295:35;;11285:51;;;:::o;11342:90::-;;11419:5;11412:13;11405:21;11394:32;;11384:48;;;:::o;11438:126::-;;11515:42;11508:5;11504:54;11493:65;;11483:81;;;:::o;11570:77::-;;11636:5;11625:16;;11615:32;;;:::o;11653:154::-;11737:6;11732:3;11727;11714:30;11799:1;11790:6;11785:3;11781:16;11774:27;11704:103;;;:::o;11813:307::-;11881:1;11891:113;11905:6;11902:1;11899:13;11891:113;;;11990:1;11985:3;11981:11;11975:18;11971:1;11966:3;11962:11;11955:39;11927:2;11924:1;11920:10;11915:15;;11891:113;;;12022:6;12019:1;12016:13;12013:2;;;12102:1;12093:6;12088:3;12084:16;12077:27;12013:2;11862:258;;;;:::o;12126:320::-;;12207:1;12201:4;12197:12;12187:22;;12254:1;12248:4;12244:12;12275:18;12265:2;;12331:4;12323:6;12319:17;12309:27;;12265:2;12393;12385:6;12382:14;12362:18;12359:38;12356:2;;;12412:18;;:::i;:::-;12356:2;12177:269;;;;:::o;12452:180::-;12500:77;12497:1;12490:88;12597:4;12594:1;12587:15;12621:4;12618:1;12611:15;12638:180;12686:77;12683:1;12676:88;12783:4;12780:1;12773:15;12807:4;12804:1;12797:15;12824:102;;12916:2;12912:7;12907:2;12900:5;12896:14;12892:28;12882:38;;12872:54;;;:::o;12932:122::-;13005:24;13023:5;13005:24;:::i;:::-;12998:5;12995:35;12985:2;;13044:1;13041;13034:12;12985:2;12975:79;:::o;13060:122::-;13133:24;13151:5;13133:24;:::i;:::-;13126:5;13123:35;13113:2;;13172:1;13169;13162:12;13113:2;13103:79;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract IoTDataStorage {\\r\\n ...\n  PUSH 40\t\t\tcontract IoTDataStorage {\\r\\n ...\n  MSTORE \t\t\tcontract IoTDataStorage {\\r\\n ...\n  CALLVALUE \t\t\tconstructor() {\\r\\n        own...\n  DUP1 \t\t\tconstructor() {\\r\\n        own...\n  ISZERO \t\t\tconstructor() {\\r\\n        own...\n  PUSH [tag] 1\t\t\tconstructor() {\\r\\n        own...\n  JUMPI \t\t\tconstructor() {\\r\\n        own...\n  PUSH 0\t\t\tconstructor() {\\r\\n        own...\n  DUP1 \t\t\tconstructor() {\\r\\n        own...\n  REVERT \t\t\tconstructor() {\\r\\n        own...\ntag 1\t\t\tconstructor() {\\r\\n        own...\n  JUMPDEST \t\t\tconstructor() {\\r\\n        own...\n  POP \t\t\tconstructor() {\\r\\n        own...\n  CALLER \t\t\tmsg.sender\n  PUSH 0\t\t\towner\n  DUP1 \t\t\towner\n  PUSH 100\t\t\towner = msg.sender\n  EXP \t\t\towner = msg.sender\n  DUP2 \t\t\towner = msg.sender\n  SLOAD \t\t\towner = msg.sender\n  DUP2 \t\t\towner = msg.sender\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner = msg.sender\n  MUL \t\t\towner = msg.sender\n  NOT \t\t\towner = msg.sender\n  AND \t\t\towner = msg.sender\n  SWAP1 \t\t\towner = msg.sender\n  DUP4 \t\t\towner = msg.sender\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner = msg.sender\n  AND \t\t\towner = msg.sender\n  MUL \t\t\towner = msg.sender\n  OR \t\t\towner = msg.sender\n  SWAP1 \t\t\towner = msg.sender\n  SSTORE \t\t\towner = msg.sender\n  POP \t\t\towner = msg.sender\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract IoTDataStorage {\\r\\n ...\n  DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract IoTDataStorage {\\r\\n ...\n  PUSH 0\t\t\tcontract IoTDataStorage {\\r\\n ...\n  CODECOPY \t\t\tcontract IoTDataStorage {\\r\\n ...\n  PUSH 0\t\t\tcontract IoTDataStorage {\\r\\n ...\n  RETURN \t\t\tcontract IoTDataStorage {\\r\\n ...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 40\t\t\tcontract IoTDataStorage {\\r\\n ...\n      MSTORE \t\t\tcontract IoTDataStorage {\\r\\n ...\n      CALLVALUE \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      ISZERO \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 1\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 0\t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      REVERT \t\t\tcontract IoTDataStorage {\\r\\n ...\n    tag 1\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPDEST \t\t\tcontract IoTDataStorage {\\r\\n ...\n      POP \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 4\t\t\tcontract IoTDataStorage {\\r\\n ...\n      CALLDATASIZE \t\t\tcontract IoTDataStorage {\\r\\n ...\n      LT \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 0\t\t\tcontract IoTDataStorage {\\r\\n ...\n      CALLDATALOAD \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH E0\t\t\tcontract IoTDataStorage {\\r\\n ...\n      SHR \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 6FE3C2B2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      GT \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 10\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 6FE3C2B2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 6\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 8DA5CB5B\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 7\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 933EB9CA\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 8\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH D4001EF2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 9\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMP \t\t\tcontract IoTDataStorage {\\r\\n ...\n    tag 10\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPDEST \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 1B11092D\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 3\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 23DFC578\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 4\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 30A76B38\t\t\tcontract IoTDataStorage {\\r\\n ...\n      EQ \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH [tag] 5\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPI \t\t\tcontract IoTDataStorage {\\r\\n ...\n    tag 2\t\t\tcontract IoTDataStorage {\\r\\n ...\n      JUMPDEST \t\t\tcontract IoTDataStorage {\\r\\n ...\n      PUSH 0\t\t\tcontract IoTDataStorage {\\r\\n ...\n      DUP1 \t\t\tcontract IoTDataStorage {\\r\\n ...\n      REVERT \t\t\tcontract IoTDataStorage {\\r\\n ...\n    tag 3\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 11\t\t\tmapping(address => bool) publi...\n      PUSH 4\t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      CALLDATASIZE \t\t\tmapping(address => bool) publi...\n      SUB \t\t\tmapping(address => bool) publi...\n      DUP2 \t\t\tmapping(address => bool) publi...\n      ADD \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 12\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 13\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 12\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 14\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 11\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      MLOAD \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 15\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 16\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 15\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      MLOAD \t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SUB \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      RETURN \t\t\tmapping(address => bool) publi...\n    tag 4\t\t\tfunction getDataByIndex(string...\n      JUMPDEST \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 17\t\t\tfunction getDataByIndex(string...\n      PUSH 4\t\t\tfunction getDataByIndex(string...\n      DUP1 \t\t\tfunction getDataByIndex(string...\n      CALLDATASIZE \t\t\tfunction getDataByIndex(string...\n      SUB \t\t\tfunction getDataByIndex(string...\n      DUP2 \t\t\tfunction getDataByIndex(string...\n      ADD \t\t\tfunction getDataByIndex(string...\n      SWAP1 \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 18\t\t\tfunction getDataByIndex(string...\n      SWAP2 \t\t\tfunction getDataByIndex(string...\n      SWAP1 \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 19\t\t\tfunction getDataByIndex(string...\n      JUMP [in]\t\t\tfunction getDataByIndex(string...\n    tag 18\t\t\tfunction getDataByIndex(string...\n      JUMPDEST \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 20\t\t\tfunction getDataByIndex(string...\n      JUMP [in]\t\t\tfunction getDataByIndex(string...\n    tag 17\t\t\tfunction getDataByIndex(string...\n      JUMPDEST \t\t\tfunction getDataByIndex(string...\n      PUSH 40\t\t\tfunction getDataByIndex(string...\n      MLOAD \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 21\t\t\tfunction getDataByIndex(string...\n      SWAP4 \t\t\tfunction getDataByIndex(string...\n      SWAP3 \t\t\tfunction getDataByIndex(string...\n      SWAP2 \t\t\tfunction getDataByIndex(string...\n      SWAP1 \t\t\tfunction getDataByIndex(string...\n      PUSH [tag] 22\t\t\tfunction getDataByIndex(string...\n      JUMP [in]\t\t\tfunction getDataByIndex(string...\n    tag 21\t\t\tfunction getDataByIndex(string...\n      JUMPDEST \t\t\tfunction getDataByIndex(string...\n      PUSH 40\t\t\tfunction getDataByIndex(string...\n      MLOAD \t\t\tfunction getDataByIndex(string...\n      DUP1 \t\t\tfunction getDataByIndex(string...\n      SWAP2 \t\t\tfunction getDataByIndex(string...\n      SUB \t\t\tfunction getDataByIndex(string...\n      SWAP1 \t\t\tfunction getDataByIndex(string...\n      RETURN \t\t\tfunction getDataByIndex(string...\n    tag 5\t\t\tfunction getDataCount(string m...\n      JUMPDEST \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 23\t\t\tfunction getDataCount(string m...\n      PUSH 4\t\t\tfunction getDataCount(string m...\n      DUP1 \t\t\tfunction getDataCount(string m...\n      CALLDATASIZE \t\t\tfunction getDataCount(string m...\n      SUB \t\t\tfunction getDataCount(string m...\n      DUP2 \t\t\tfunction getDataCount(string m...\n      ADD \t\t\tfunction getDataCount(string m...\n      SWAP1 \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 24\t\t\tfunction getDataCount(string m...\n      SWAP2 \t\t\tfunction getDataCount(string m...\n      SWAP1 \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 25\t\t\tfunction getDataCount(string m...\n      JUMP [in]\t\t\tfunction getDataCount(string m...\n    tag 24\t\t\tfunction getDataCount(string m...\n      JUMPDEST \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 26\t\t\tfunction getDataCount(string m...\n      JUMP [in]\t\t\tfunction getDataCount(string m...\n    tag 23\t\t\tfunction getDataCount(string m...\n      JUMPDEST \t\t\tfunction getDataCount(string m...\n      PUSH 40\t\t\tfunction getDataCount(string m...\n      MLOAD \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 27\t\t\tfunction getDataCount(string m...\n      SWAP2 \t\t\tfunction getDataCount(string m...\n      SWAP1 \t\t\tfunction getDataCount(string m...\n      PUSH [tag] 28\t\t\tfunction getDataCount(string m...\n      JUMP [in]\t\t\tfunction getDataCount(string m...\n    tag 27\t\t\tfunction getDataCount(string m...\n      JUMPDEST \t\t\tfunction getDataCount(string m...\n      PUSH 40\t\t\tfunction getDataCount(string m...\n      MLOAD \t\t\tfunction getDataCount(string m...\n      DUP1 \t\t\tfunction getDataCount(string m...\n      SWAP2 \t\t\tfunction getDataCount(string m...\n      SUB \t\t\tfunction getDataCount(string m...\n      SWAP1 \t\t\tfunction getDataCount(string m...\n      RETURN \t\t\tfunction getDataCount(string m...\n    tag 6\t\t\tfunction revokeDevice(address ...\n      JUMPDEST \t\t\tfunction revokeDevice(address ...\n      PUSH [tag] 29\t\t\tfunction revokeDevice(address ...\n      PUSH 4\t\t\tfunction revokeDevice(address ...\n      DUP1 \t\t\tfunction revokeDevice(address ...\n      CALLDATASIZE \t\t\tfunction revokeDevice(address ...\n      SUB \t\t\tfunction revokeDevice(address ...\n      DUP2 \t\t\tfunction revokeDevice(address ...\n      ADD \t\t\tfunction revokeDevice(address ...\n      SWAP1 \t\t\tfunction revokeDevice(address ...\n      PUSH [tag] 30\t\t\tfunction revokeDevice(address ...\n      SWAP2 \t\t\tfunction revokeDevice(address ...\n      SWAP1 \t\t\tfunction revokeDevice(address ...\n      PUSH [tag] 13\t\t\tfunction revokeDevice(address ...\n      JUMP [in]\t\t\tfunction revokeDevice(address ...\n    tag 30\t\t\tfunction revokeDevice(address ...\n      JUMPDEST \t\t\tfunction revokeDevice(address ...\n      PUSH [tag] 31\t\t\tfunction revokeDevice(address ...\n      JUMP [in]\t\t\tfunction revokeDevice(address ...\n    tag 29\t\t\tfunction revokeDevice(address ...\n      JUMPDEST \t\t\tfunction revokeDevice(address ...\n      STOP \t\t\tfunction revokeDevice(address ...\n    tag 7\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH [tag] 32\t\t\taddress public owner\n      PUSH [tag] 33\t\t\taddress public owner\n      JUMP [in]\t\t\taddress public owner\n    tag 32\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 40\t\t\taddress public owner\n      MLOAD \t\t\taddress public owner\n      PUSH [tag] 34\t\t\taddress public owner\n      SWAP2 \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      PUSH [tag] 35\t\t\taddress public owner\n      JUMP [in]\t\t\taddress public owner\n    tag 34\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 40\t\t\taddress public owner\n      MLOAD \t\t\taddress public owner\n      DUP1 \t\t\taddress public owner\n      SWAP2 \t\t\taddress public owner\n      SUB \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      RETURN \t\t\taddress public owner\n    tag 8\t\t\tfunction authorizeDevice(addre...\n      JUMPDEST \t\t\tfunction authorizeDevice(addre...\n      PUSH [tag] 36\t\t\tfunction authorizeDevice(addre...\n      PUSH 4\t\t\tfunction authorizeDevice(addre...\n      DUP1 \t\t\tfunction authorizeDevice(addre...\n      CALLDATASIZE \t\t\tfunction authorizeDevice(addre...\n      SUB \t\t\tfunction authorizeDevice(addre...\n      DUP2 \t\t\tfunction authorizeDevice(addre...\n      ADD \t\t\tfunction authorizeDevice(addre...\n      SWAP1 \t\t\tfunction authorizeDevice(addre...\n      PUSH [tag] 37\t\t\tfunction authorizeDevice(addre...\n      SWAP2 \t\t\tfunction authorizeDevice(addre...\n      SWAP1 \t\t\tfunction authorizeDevice(addre...\n      PUSH [tag] 13\t\t\tfunction authorizeDevice(addre...\n      JUMP [in]\t\t\tfunction authorizeDevice(addre...\n    tag 37\t\t\tfunction authorizeDevice(addre...\n      JUMPDEST \t\t\tfunction authorizeDevice(addre...\n      PUSH [tag] 38\t\t\tfunction authorizeDevice(addre...\n      JUMP [in]\t\t\tfunction authorizeDevice(addre...\n    tag 36\t\t\tfunction authorizeDevice(addre...\n      JUMPDEST \t\t\tfunction authorizeDevice(addre...\n      STOP \t\t\tfunction authorizeDevice(addre...\n    tag 9\t\t\tfunction storeData(string memo...\n      JUMPDEST \t\t\tfunction storeData(string memo...\n      PUSH [tag] 39\t\t\tfunction storeData(string memo...\n      PUSH 4\t\t\tfunction storeData(string memo...\n      DUP1 \t\t\tfunction storeData(string memo...\n      CALLDATASIZE \t\t\tfunction storeData(string memo...\n      SUB \t\t\tfunction storeData(string memo...\n      DUP2 \t\t\tfunction storeData(string memo...\n      ADD \t\t\tfunction storeData(string memo...\n      SWAP1 \t\t\tfunction storeData(string memo...\n      PUSH [tag] 40\t\t\tfunction storeData(string memo...\n      SWAP2 \t\t\tfunction storeData(string memo...\n      SWAP1 \t\t\tfunction storeData(string memo...\n      PUSH [tag] 41\t\t\tfunction storeData(string memo...\n      JUMP [in]\t\t\tfunction storeData(string memo...\n    tag 40\t\t\tfunction storeData(string memo...\n      JUMPDEST \t\t\tfunction storeData(string memo...\n      PUSH [tag] 42\t\t\tfunction storeData(string memo...\n      JUMP [in]\t\t\tfunction storeData(string memo...\n    tag 39\t\t\tfunction storeData(string memo...\n      JUMPDEST \t\t\tfunction storeData(string memo...\n      STOP \t\t\tfunction storeData(string memo...\n    tag 14\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 2\t\t\tmapping(address => bool) publi...\n      PUSH 20\t\t\tmapping(address => bool) publi...\n      MSTORE \t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      MSTORE \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      KECCAK256 \t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      POP \t\t\tmapping(address => bool) publi...\n      SLOAD \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH 100\t\t\tmapping(address => bool) publi...\n      EXP \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      DIV \t\t\tmapping(address => bool) publi...\n      PUSH FF\t\t\tmapping(address => bool) publi...\n      AND \t\t\tmapping(address => bool) publi...\n      DUP2 \t\t\tmapping(address => bool) publi...\n      JUMP [out]\t\t\tmapping(address => bool) publi...\n    tag 20\t\t\tfunction getDataByIndex(string...\n      JUMPDEST \t\t\tfunction getDataByIndex(string...\n      PUSH 60\t\t\tstring memory\n      DUP1 \t\t\tstring memory\n      PUSH 0\t\t\tuint256\n      PUSH 1\t\t\tdeviceData\n      DUP6 \t\t\tdeviceID\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      PUSH [tag] 44\t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      PUSH [tag] 45\t\t\tdeviceData[deviceID]\n      JUMP [in]\t\t\tdeviceData[deviceID]\n    tag 44\t\t\tdeviceData[deviceID]\n      JUMPDEST \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      DUP2 \t\t\tdeviceData[deviceID]\n      MSTORE \t\t\tdeviceData[deviceID]\n      PUSH 20\t\t\tdeviceData[deviceID]\n      ADD \t\t\tdeviceData[deviceID]\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SUB \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      KECCAK256 \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID].length\n      SLOAD \t\t\tdeviceData[deviceID].length\n      SWAP1 \t\t\tdeviceData[deviceID].length\n      POP \t\t\tdeviceData[deviceID].length\n      DUP5 \t\t\tindex\n      LT \t\t\tindex < deviceData[deviceID].l...\n      PUSH [tag] 46\t\t\trequire(index < deviceData[dev...\n      JUMPI \t\t\trequire(index < deviceData[dev...\n      PUSH 40\t\t\trequire(index < deviceData[dev...\n      MLOAD \t\t\trequire(index < deviceData[dev...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(index < deviceData[dev...\n      DUP2 \t\t\trequire(index < deviceData[dev...\n      MSTORE \t\t\trequire(index < deviceData[dev...\n      PUSH 4\t\t\trequire(index < deviceData[dev...\n      ADD \t\t\trequire(index < deviceData[dev...\n      PUSH [tag] 47\t\t\trequire(index < deviceData[dev...\n      SWAP1 \t\t\trequire(index < deviceData[dev...\n      PUSH [tag] 48\t\t\trequire(index < deviceData[dev...\n      JUMP [in]\t\t\trequire(index < deviceData[dev...\n    tag 47\t\t\trequire(index < deviceData[dev...\n      JUMPDEST \t\t\trequire(index < deviceData[dev...\n      PUSH 40\t\t\trequire(index < deviceData[dev...\n      MLOAD \t\t\trequire(index < deviceData[dev...\n      DUP1 \t\t\trequire(index < deviceData[dev...\n      SWAP2 \t\t\trequire(index < deviceData[dev...\n      SUB \t\t\trequire(index < deviceData[dev...\n      SWAP1 \t\t\trequire(index < deviceData[dev...\n      REVERT \t\t\trequire(index < deviceData[dev...\n    tag 46\t\t\trequire(index < deviceData[dev...\n      JUMPDEST \t\t\trequire(index < deviceData[dev...\n      PUSH 0\t\t\tDataEntry memory entry\n      PUSH 1\t\t\tdeviceData\n      DUP7 \t\t\tdeviceID\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      PUSH [tag] 49\t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      PUSH [tag] 45\t\t\tdeviceData[deviceID]\n      JUMP [in]\t\t\tdeviceData[deviceID]\n    tag 49\t\t\tdeviceData[deviceID]\n      JUMPDEST \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      DUP2 \t\t\tdeviceData[deviceID]\n      MSTORE \t\t\tdeviceData[deviceID]\n      PUSH 20\t\t\tdeviceData[deviceID]\n      ADD \t\t\tdeviceData[deviceID]\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SUB \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      KECCAK256 \t\t\tdeviceData[deviceID]\n      DUP6 \t\t\tindex\n      DUP2 \t\t\tdeviceData[deviceID][index]\n      SLOAD \t\t\tdeviceData[deviceID][index]\n      DUP2 \t\t\tdeviceData[deviceID][index]\n      LT \t\t\tdeviceData[deviceID][index]\n      PUSH [tag] 50\t\t\tdeviceData[deviceID][index]\n      JUMPI \t\t\tdeviceData[deviceID][index]\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tdeviceData[deviceID][index]\n      PUSH 0\t\t\tdeviceData[deviceID][index]\n      MSTORE \t\t\tdeviceData[deviceID][index]\n      PUSH 32\t\t\tdeviceData[deviceID][index]\n      PUSH 4\t\t\tdeviceData[deviceID][index]\n      MSTORE \t\t\tdeviceData[deviceID][index]\n      PUSH 24\t\t\tdeviceData[deviceID][index]\n      PUSH 0\t\t\tdeviceData[deviceID][index]\n      REVERT \t\t\tdeviceData[deviceID][index]\n    tag 50\t\t\tdeviceData[deviceID][index]\n      JUMPDEST \t\t\tdeviceData[deviceID][index]\n      SWAP1 \t\t\tdeviceData[deviceID][index]\n      PUSH 0\t\t\tdeviceData[deviceID][index]\n      MSTORE \t\t\tdeviceData[deviceID][index]\n      PUSH 20\t\t\tdeviceData[deviceID][index]\n      PUSH 0\t\t\tdeviceData[deviceID][index]\n      KECCAK256 \t\t\tdeviceData[deviceID][index]\n      SWAP1 \t\t\tdeviceData[deviceID][index]\n      PUSH 3\t\t\tdeviceData[deviceID][index]\n      MUL \t\t\tdeviceData[deviceID][index]\n      ADD \t\t\tdeviceData[deviceID][index]\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MLOAD \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 60\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      PUSH 0\t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 52\t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 53\t\t\tDataEntry memory entry = devic...\n      JUMP [in]\t\t\tDataEntry memory entry = devic...\n    tag 52\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      DIV \t\t\tDataEntry memory entry = devic...\n      MUL \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MLOAD \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SWAP3 \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 54\t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 53\t\t\tDataEntry memory entry = devic...\n      JUMP [in]\t\t\tDataEntry memory entry = devic...\n    tag 54\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      ISZERO \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 55\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      LT \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 56\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      PUSH 100\t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      DIV \t\t\tDataEntry memory entry = devic...\n      MUL \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 55\t\t\tDataEntry memory entry = devic...\n      JUMP \t\t\tDataEntry memory entry = devic...\n    tag 56\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 0\t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      PUSH 0\t\t\tDataEntry memory entry = devic...\n      KECCAK256 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n    tag 57\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      GT \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 57\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      SUB \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      AND \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n    tag 55\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 1\t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 58\t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 53\t\t\tDataEntry memory entry = devic...\n      JUMP [in]\t\t\tDataEntry memory entry = devic...\n    tag 58\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      DIV \t\t\tDataEntry memory entry = devic...\n      MUL \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MLOAD \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 40\t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SWAP3 \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 59\t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 53\t\t\tDataEntry memory entry = devic...\n      JUMP [in]\t\t\tDataEntry memory entry = devic...\n    tag 59\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      ISZERO \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 60\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      LT \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 61\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      PUSH 100\t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      DIV \t\t\tDataEntry memory entry = devic...\n      MUL \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 60\t\t\tDataEntry memory entry = devic...\n      JUMP \t\t\tDataEntry memory entry = devic...\n    tag 61\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 0\t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      PUSH 0\t\t\tDataEntry memory entry = devic...\n      KECCAK256 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n    tag 62\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 1\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tDataEntry memory entry = devic...\n      DUP4 \t\t\tDataEntry memory entry = devic...\n      GT \t\t\tDataEntry memory entry = devic...\n      PUSH [tag] 62\t\t\tDataEntry memory entry = devic...\n      JUMPI \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      SUB \t\t\tDataEntry memory entry = devic...\n      PUSH 1F\t\t\tDataEntry memory entry = devic...\n      AND \t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SWAP2 \t\t\tDataEntry memory entry = devic...\n    tag 60\t\t\tDataEntry memory entry = devic...\n      JUMPDEST \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      PUSH 20\t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      PUSH 2\t\t\tDataEntry memory entry = devic...\n      DUP3 \t\t\tDataEntry memory entry = devic...\n      ADD \t\t\tDataEntry memory entry = devic...\n      SLOAD \t\t\tDataEntry memory entry = devic...\n      DUP2 \t\t\tDataEntry memory entry = devic...\n      MSTORE \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      SWAP1 \t\t\tDataEntry memory entry = devic...\n      POP \t\t\tDataEntry memory entry = devic...\n      DUP1 \t\t\tentry\n      PUSH 0\t\t\tentry.dataType\n      ADD \t\t\tentry.dataType\n      MLOAD \t\t\tentry.dataType\n      DUP2 \t\t\tentry\n      PUSH 20\t\t\tentry.value\n      ADD \t\t\tentry.value\n      MLOAD \t\t\tentry.value\n      DUP3 \t\t\tentry\n      PUSH 40\t\t\tentry.timestamp\n      ADD \t\t\tentry.timestamp\n      MLOAD \t\t\tentry.timestamp\n      SWAP4 \t\t\treturn (entry.dataType, entry....\n      POP \t\t\treturn (entry.dataType, entry....\n      SWAP4 \t\t\treturn (entry.dataType, entry....\n      POP \t\t\treturn (entry.dataType, entry....\n      SWAP4 \t\t\treturn (entry.dataType, entry....\n      POP \t\t\treturn (entry.dataType, entry....\n      POP \t\t\treturn (entry.dataType, entry....\n      SWAP3 \t\t\tfunction getDataByIndex(string...\n      POP \t\t\tfunction getDataByIndex(string...\n      SWAP3 \t\t\tfunction getDataByIndex(string...\n      POP \t\t\tfunction getDataByIndex(string...\n      SWAP3 \t\t\tfunction getDataByIndex(string...\n      JUMP [out]\t\t\tfunction getDataByIndex(string...\n    tag 26\t\t\tfunction getDataCount(string m...\n      JUMPDEST \t\t\tfunction getDataCount(string m...\n      PUSH 0\t\t\tuint256\n      PUSH 1\t\t\tdeviceData\n      DUP3 \t\t\tdeviceID\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      PUSH [tag] 64\t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      PUSH [tag] 45\t\t\tdeviceData[deviceID]\n      JUMP [in]\t\t\tdeviceData[deviceID]\n    tag 64\t\t\tdeviceData[deviceID]\n      JUMPDEST \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      DUP2 \t\t\tdeviceData[deviceID]\n      MSTORE \t\t\tdeviceData[deviceID]\n      PUSH 20\t\t\tdeviceData[deviceID]\n      ADD \t\t\tdeviceData[deviceID]\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SUB \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      KECCAK256 \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID].length\n      SLOAD \t\t\tdeviceData[deviceID].length\n      SWAP1 \t\t\tdeviceData[deviceID].length\n      POP \t\t\tdeviceData[deviceID].length\n      SWAP1 \t\t\treturn deviceData[deviceID].le...\n      POP \t\t\treturn deviceData[deviceID].le...\n      SWAP2 \t\t\tfunction getDataCount(string m...\n      SWAP1 \t\t\tfunction getDataCount(string m...\n      POP \t\t\tfunction getDataCount(string m...\n      JUMP [out]\t\t\tfunction getDataCount(string m...\n    tag 31\t\t\tfunction revokeDevice(address ...\n      JUMPDEST \t\t\tfunction revokeDevice(address ...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\towner\n      SLOAD \t\t\towner\n      SWAP1 \t\t\towner\n      PUSH 100\t\t\towner\n      EXP \t\t\towner\n      SWAP1 \t\t\towner\n      DIV \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner\n      AND \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      EQ \t\t\tmsg.sender == owner\n      PUSH [tag] 66\t\t\trequire(msg.sender == owner, \"...\n      JUMPI \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == owner, \"...\n      DUP2 \t\t\trequire(msg.sender == owner, \"...\n      MSTORE \t\t\trequire(msg.sender == owner, \"...\n      PUSH 4\t\t\trequire(msg.sender == owner, \"...\n      ADD \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 67\t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 68\t\t\trequire(msg.sender == owner, \"...\n      JUMP [in]\t\t\trequire(msg.sender == owner, \"...\n    tag 67\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\trequire(msg.sender == owner, \"...\n      SWAP2 \t\t\trequire(msg.sender == owner, \"...\n      SUB \t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      REVERT \t\t\trequire(msg.sender == owner, \"...\n    tag 66\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 0\t\t\tfalse\n      PUSH 2\t\t\tauthorizedDevices\n      PUSH 0\t\t\tauthorizedDevices[device]\n      DUP4 \t\t\tdevice\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[device]\n      AND \t\t\tauthorizedDevices[device]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[device]\n      AND \t\t\tauthorizedDevices[device]\n      DUP2 \t\t\tauthorizedDevices[device]\n      MSTORE \t\t\tauthorizedDevices[device]\n      PUSH 20\t\t\tauthorizedDevices[device]\n      ADD \t\t\tauthorizedDevices[device]\n      SWAP1 \t\t\tauthorizedDevices[device]\n      DUP2 \t\t\tauthorizedDevices[device]\n      MSTORE \t\t\tauthorizedDevices[device]\n      PUSH 20\t\t\tauthorizedDevices[device]\n      ADD \t\t\tauthorizedDevices[device]\n      PUSH 0\t\t\tauthorizedDevices[device]\n      KECCAK256 \t\t\tauthorizedDevices[device]\n      PUSH 0\t\t\tauthorizedDevices[device]\n      PUSH 100\t\t\tauthorizedDevices[device] = fa...\n      EXP \t\t\tauthorizedDevices[device] = fa...\n      DUP2 \t\t\tauthorizedDevices[device] = fa...\n      SLOAD \t\t\tauthorizedDevices[device] = fa...\n      DUP2 \t\t\tauthorizedDevices[device] = fa...\n      PUSH FF\t\t\tauthorizedDevices[device] = fa...\n      MUL \t\t\tauthorizedDevices[device] = fa...\n      NOT \t\t\tauthorizedDevices[device] = fa...\n      AND \t\t\tauthorizedDevices[device] = fa...\n      SWAP1 \t\t\tauthorizedDevices[device] = fa...\n      DUP4 \t\t\tauthorizedDevices[device] = fa...\n      ISZERO \t\t\tauthorizedDevices[device] = fa...\n      ISZERO \t\t\tauthorizedDevices[device] = fa...\n      MUL \t\t\tauthorizedDevices[device] = fa...\n      OR \t\t\tauthorizedDevices[device] = fa...\n      SWAP1 \t\t\tauthorizedDevices[device] = fa...\n      SSTORE \t\t\tauthorizedDevices[device] = fa...\n      POP \t\t\tauthorizedDevices[device] = fa...\n      POP \t\t\tfunction revokeDevice(address ...\n      JUMP [out]\t\t\tfunction revokeDevice(address ...\n    tag 33\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 0\t\t\taddress public owner\n      DUP1 \t\t\taddress public owner\n      SLOAD \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      PUSH 100\t\t\taddress public owner\n      EXP \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      DIV \t\t\taddress public owner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public owner\n      AND \t\t\taddress public owner\n      DUP2 \t\t\taddress public owner\n      JUMP [out]\t\t\taddress public owner\n    tag 38\t\t\tfunction authorizeDevice(addre...\n      JUMPDEST \t\t\tfunction authorizeDevice(addre...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\towner\n      SLOAD \t\t\towner\n      SWAP1 \t\t\towner\n      PUSH 100\t\t\towner\n      EXP \t\t\towner\n      SWAP1 \t\t\towner\n      DIV \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner\n      AND \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      EQ \t\t\tmsg.sender == owner\n      PUSH [tag] 71\t\t\trequire(msg.sender == owner, \"...\n      JUMPI \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == owner, \"...\n      DUP2 \t\t\trequire(msg.sender == owner, \"...\n      MSTORE \t\t\trequire(msg.sender == owner, \"...\n      PUSH 4\t\t\trequire(msg.sender == owner, \"...\n      ADD \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 72\t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 68\t\t\trequire(msg.sender == owner, \"...\n      JUMP [in]\t\t\trequire(msg.sender == owner, \"...\n    tag 72\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\trequire(msg.sender == owner, \"...\n      SWAP2 \t\t\trequire(msg.sender == owner, \"...\n      SUB \t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      REVERT \t\t\trequire(msg.sender == owner, \"...\n    tag 71\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 1\t\t\ttrue\n      PUSH 2\t\t\tauthorizedDevices\n      PUSH 0\t\t\tauthorizedDevices[device]\n      DUP4 \t\t\tdevice\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[device]\n      AND \t\t\tauthorizedDevices[device]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[device]\n      AND \t\t\tauthorizedDevices[device]\n      DUP2 \t\t\tauthorizedDevices[device]\n      MSTORE \t\t\tauthorizedDevices[device]\n      PUSH 20\t\t\tauthorizedDevices[device]\n      ADD \t\t\tauthorizedDevices[device]\n      SWAP1 \t\t\tauthorizedDevices[device]\n      DUP2 \t\t\tauthorizedDevices[device]\n      MSTORE \t\t\tauthorizedDevices[device]\n      PUSH 20\t\t\tauthorizedDevices[device]\n      ADD \t\t\tauthorizedDevices[device]\n      PUSH 0\t\t\tauthorizedDevices[device]\n      KECCAK256 \t\t\tauthorizedDevices[device]\n      PUSH 0\t\t\tauthorizedDevices[device]\n      PUSH 100\t\t\tauthorizedDevices[device] = tr...\n      EXP \t\t\tauthorizedDevices[device] = tr...\n      DUP2 \t\t\tauthorizedDevices[device] = tr...\n      SLOAD \t\t\tauthorizedDevices[device] = tr...\n      DUP2 \t\t\tauthorizedDevices[device] = tr...\n      PUSH FF\t\t\tauthorizedDevices[device] = tr...\n      MUL \t\t\tauthorizedDevices[device] = tr...\n      NOT \t\t\tauthorizedDevices[device] = tr...\n      AND \t\t\tauthorizedDevices[device] = tr...\n      SWAP1 \t\t\tauthorizedDevices[device] = tr...\n      DUP4 \t\t\tauthorizedDevices[device] = tr...\n      ISZERO \t\t\tauthorizedDevices[device] = tr...\n      ISZERO \t\t\tauthorizedDevices[device] = tr...\n      MUL \t\t\tauthorizedDevices[device] = tr...\n      OR \t\t\tauthorizedDevices[device] = tr...\n      SWAP1 \t\t\tauthorizedDevices[device] = tr...\n      SSTORE \t\t\tauthorizedDevices[device] = tr...\n      POP \t\t\tauthorizedDevices[device] = tr...\n      POP \t\t\tfunction authorizeDevice(addre...\n      JUMP [out]\t\t\tfunction authorizeDevice(addre...\n    tag 42\t\t\tfunction storeData(string memo...\n      JUMPDEST \t\t\tfunction storeData(string memo...\n      PUSH 2\t\t\tauthorizedDevices\n      PUSH 0\t\t\tauthorizedDevices[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[msg.sender]\n      AND \t\t\tauthorizedDevices[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tauthorizedDevices[msg.sender]\n      AND \t\t\tauthorizedDevices[msg.sender]\n      DUP2 \t\t\tauthorizedDevices[msg.sender]\n      MSTORE \t\t\tauthorizedDevices[msg.sender]\n      PUSH 20\t\t\tauthorizedDevices[msg.sender]\n      ADD \t\t\tauthorizedDevices[msg.sender]\n      SWAP1 \t\t\tauthorizedDevices[msg.sender]\n      DUP2 \t\t\tauthorizedDevices[msg.sender]\n      MSTORE \t\t\tauthorizedDevices[msg.sender]\n      PUSH 20\t\t\tauthorizedDevices[msg.sender]\n      ADD \t\t\tauthorizedDevices[msg.sender]\n      PUSH 0\t\t\tauthorizedDevices[msg.sender]\n      KECCAK256 \t\t\tauthorizedDevices[msg.sender]\n      PUSH 0\t\t\tauthorizedDevices[msg.sender]\n      SWAP1 \t\t\tauthorizedDevices[msg.sender]\n      SLOAD \t\t\tauthorizedDevices[msg.sender]\n      SWAP1 \t\t\tauthorizedDevices[msg.sender]\n      PUSH 100\t\t\tauthorizedDevices[msg.sender]\n      EXP \t\t\tauthorizedDevices[msg.sender]\n      SWAP1 \t\t\tauthorizedDevices[msg.sender]\n      DIV \t\t\tauthorizedDevices[msg.sender]\n      PUSH FF\t\t\tauthorizedDevices[msg.sender]\n      AND \t\t\tauthorizedDevices[msg.sender]\n      PUSH [tag] 75\t\t\trequire(authorizedDevices[msg....\n      JUMPI \t\t\trequire(authorizedDevices[msg....\n      PUSH 40\t\t\trequire(authorizedDevices[msg....\n      MLOAD \t\t\trequire(authorizedDevices[msg....\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(authorizedDevices[msg....\n      DUP2 \t\t\trequire(authorizedDevices[msg....\n      MSTORE \t\t\trequire(authorizedDevices[msg....\n      PUSH 4\t\t\trequire(authorizedDevices[msg....\n      ADD \t\t\trequire(authorizedDevices[msg....\n      PUSH [tag] 76\t\t\trequire(authorizedDevices[msg....\n      SWAP1 \t\t\trequire(authorizedDevices[msg....\n      PUSH [tag] 77\t\t\trequire(authorizedDevices[msg....\n      JUMP [in]\t\t\trequire(authorizedDevices[msg....\n    tag 76\t\t\trequire(authorizedDevices[msg....\n      JUMPDEST \t\t\trequire(authorizedDevices[msg....\n      PUSH 40\t\t\trequire(authorizedDevices[msg....\n      MLOAD \t\t\trequire(authorizedDevices[msg....\n      DUP1 \t\t\trequire(authorizedDevices[msg....\n      SWAP2 \t\t\trequire(authorizedDevices[msg....\n      SUB \t\t\trequire(authorizedDevices[msg....\n      SWAP1 \t\t\trequire(authorizedDevices[msg....\n      REVERT \t\t\trequire(authorizedDevices[msg....\n    tag 75\t\t\trequire(authorizedDevices[msg....\n      JUMPDEST \t\t\trequire(authorizedDevices[msg....\n      PUSH 0\t\t\t0\n      DUP4 \t\t\tdeviceID\n      MLOAD \t\t\tbytes(deviceID).length\n      GT \t\t\tbytes(deviceID).length > 0\n      PUSH [tag] 79\t\t\trequire(bytes(deviceID).length...\n      JUMPI \t\t\trequire(bytes(deviceID).length...\n      PUSH 40\t\t\trequire(bytes(deviceID).length...\n      MLOAD \t\t\trequire(bytes(deviceID).length...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(bytes(deviceID).length...\n      DUP2 \t\t\trequire(bytes(deviceID).length...\n      MSTORE \t\t\trequire(bytes(deviceID).length...\n      PUSH 4\t\t\trequire(bytes(deviceID).length...\n      ADD \t\t\trequire(bytes(deviceID).length...\n      PUSH [tag] 80\t\t\trequire(bytes(deviceID).length...\n      SWAP1 \t\t\trequire(bytes(deviceID).length...\n      PUSH [tag] 81\t\t\trequire(bytes(deviceID).length...\n      JUMP [in]\t\t\trequire(bytes(deviceID).length...\n    tag 80\t\t\trequire(bytes(deviceID).length...\n      JUMPDEST \t\t\trequire(bytes(deviceID).length...\n      PUSH 40\t\t\trequire(bytes(deviceID).length...\n      MLOAD \t\t\trequire(bytes(deviceID).length...\n      DUP1 \t\t\trequire(bytes(deviceID).length...\n      SWAP2 \t\t\trequire(bytes(deviceID).length...\n      SUB \t\t\trequire(bytes(deviceID).length...\n      SWAP1 \t\t\trequire(bytes(deviceID).length...\n      REVERT \t\t\trequire(bytes(deviceID).length...\n    tag 79\t\t\trequire(bytes(deviceID).length...\n      JUMPDEST \t\t\trequire(bytes(deviceID).length...\n      PUSH 0\t\t\t0\n      DUP3 \t\t\tdataType\n      MLOAD \t\t\tbytes(dataType).length\n      GT \t\t\tbytes(dataType).length > 0\n      PUSH [tag] 82\t\t\trequire(bytes(dataType).length...\n      JUMPI \t\t\trequire(bytes(dataType).length...\n      PUSH 40\t\t\trequire(bytes(dataType).length...\n      MLOAD \t\t\trequire(bytes(dataType).length...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(bytes(dataType).length...\n      DUP2 \t\t\trequire(bytes(dataType).length...\n      MSTORE \t\t\trequire(bytes(dataType).length...\n      PUSH 4\t\t\trequire(bytes(dataType).length...\n      ADD \t\t\trequire(bytes(dataType).length...\n      PUSH [tag] 83\t\t\trequire(bytes(dataType).length...\n      SWAP1 \t\t\trequire(bytes(dataType).length...\n      PUSH [tag] 84\t\t\trequire(bytes(dataType).length...\n      JUMP [in]\t\t\trequire(bytes(dataType).length...\n    tag 83\t\t\trequire(bytes(dataType).length...\n      JUMPDEST \t\t\trequire(bytes(dataType).length...\n      PUSH 40\t\t\trequire(bytes(dataType).length...\n      MLOAD \t\t\trequire(bytes(dataType).length...\n      DUP1 \t\t\trequire(bytes(dataType).length...\n      SWAP2 \t\t\trequire(bytes(dataType).length...\n      SUB \t\t\trequire(bytes(dataType).length...\n      SWAP1 \t\t\trequire(bytes(dataType).length...\n      REVERT \t\t\trequire(bytes(dataType).length...\n    tag 82\t\t\trequire(bytes(dataType).length...\n      JUMPDEST \t\t\trequire(bytes(dataType).length...\n      PUSH 0\t\t\t0\n      DUP2 \t\t\tvalue\n      MLOAD \t\t\tbytes(value).length\n      GT \t\t\tbytes(value).length > 0\n      PUSH [tag] 85\t\t\trequire(bytes(value).length > ...\n      JUMPI \t\t\trequire(bytes(value).length > ...\n      PUSH 40\t\t\trequire(bytes(value).length > ...\n      MLOAD \t\t\trequire(bytes(value).length > ...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(bytes(value).length > ...\n      DUP2 \t\t\trequire(bytes(value).length > ...\n      MSTORE \t\t\trequire(bytes(value).length > ...\n      PUSH 4\t\t\trequire(bytes(value).length > ...\n      ADD \t\t\trequire(bytes(value).length > ...\n      PUSH [tag] 86\t\t\trequire(bytes(value).length > ...\n      SWAP1 \t\t\trequire(bytes(value).length > ...\n      PUSH [tag] 87\t\t\trequire(bytes(value).length > ...\n      JUMP [in]\t\t\trequire(bytes(value).length > ...\n    tag 86\t\t\trequire(bytes(value).length > ...\n      JUMPDEST \t\t\trequire(bytes(value).length > ...\n      PUSH 40\t\t\trequire(bytes(value).length > ...\n      MLOAD \t\t\trequire(bytes(value).length > ...\n      DUP1 \t\t\trequire(bytes(value).length > ...\n      SWAP2 \t\t\trequire(bytes(value).length > ...\n      SUB \t\t\trequire(bytes(value).length > ...\n      SWAP1 \t\t\trequire(bytes(value).length > ...\n      REVERT \t\t\trequire(bytes(value).length > ...\n    tag 85\t\t\trequire(bytes(value).length > ...\n      JUMPDEST \t\t\trequire(bytes(value).length > ...\n      PUSH 0\t\t\tDataEntry memory entry\n      PUSH 40\t\t\tDataEntry(dataType, value, blo...\n      MLOAD \t\t\tDataEntry(dataType, value, blo...\n      DUP1 \t\t\tDataEntry(dataType, value, blo...\n      PUSH 60\t\t\tDataEntry(dataType, value, blo...\n      ADD \t\t\tDataEntry(dataType, value, blo...\n      PUSH 40\t\t\tDataEntry(dataType, value, blo...\n      MSTORE \t\t\tDataEntry(dataType, value, blo...\n      DUP1 \t\t\tDataEntry(dataType, value, blo...\n      DUP5 \t\t\tdataType\n      DUP2 \t\t\tDataEntry(dataType, value, blo...\n      MSTORE \t\t\tDataEntry(dataType, value, blo...\n      PUSH 20\t\t\tDataEntry(dataType, value, blo...\n      ADD \t\t\tDataEntry(dataType, value, blo...\n      DUP4 \t\t\tvalue\n      DUP2 \t\t\tDataEntry(dataType, value, blo...\n      MSTORE \t\t\tDataEntry(dataType, value, blo...\n      PUSH 20\t\t\tDataEntry(dataType, value, blo...\n      ADD \t\t\tDataEntry(dataType, value, blo...\n      TIMESTAMP \t\t\tblock.timestamp\n      DUP2 \t\t\tDataEntry(dataType, value, blo...\n      MSTORE \t\t\tDataEntry(dataType, value, blo...\n      POP \t\t\tDataEntry(dataType, value, blo...\n      SWAP1 \t\t\tDataEntry memory entry = DataE...\n      POP \t\t\tDataEntry memory entry = DataE...\n      PUSH 1\t\t\tdeviceData\n      DUP5 \t\t\tdeviceID\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      PUSH [tag] 88\t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      PUSH [tag] 45\t\t\tdeviceData[deviceID]\n      JUMP [in]\t\t\tdeviceData[deviceID]\n    tag 88\t\t\tdeviceData[deviceID]\n      JUMPDEST \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      DUP2 \t\t\tdeviceData[deviceID]\n      MSTORE \t\t\tdeviceData[deviceID]\n      PUSH 20\t\t\tdeviceData[deviceID]\n      ADD \t\t\tdeviceData[deviceID]\n      PUSH 40\t\t\tdeviceData[deviceID]\n      MLOAD \t\t\tdeviceData[deviceID]\n      DUP1 \t\t\tdeviceData[deviceID]\n      SWAP2 \t\t\tdeviceData[deviceID]\n      SUB \t\t\tdeviceData[deviceID]\n      SWAP1 \t\t\tdeviceData[deviceID]\n      KECCAK256 \t\t\tdeviceData[deviceID]\n      DUP2 \t\t\tentry\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      DUP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 1\t\t\tdeviceData[deviceID].push(entr...\n      DUP2 \t\t\tdeviceData[deviceID].push(entr...\n      SLOAD \t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      DUP1 \t\t\tdeviceData[deviceID].push(entr...\n      DUP3 \t\t\tdeviceData[deviceID].push(entr...\n      SSTORE \t\t\tdeviceData[deviceID].push(entr...\n      DUP1 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 1\t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      SUB \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 0\t\t\tdeviceData[deviceID].push(entr...\n      MSTORE \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 20\t\t\tdeviceData[deviceID].push(entr...\n      PUSH 0\t\t\tdeviceData[deviceID].push(entr...\n      KECCAK256 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 3\t\t\tdeviceData[deviceID].push(entr...\n      MUL \t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 0\t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 0\t\t\tdeviceData[deviceID].push(entr...\n      DUP3 \t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      MLOAD \t\t\tdeviceData[deviceID].push(entr...\n      DUP2 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 0\t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      DUP1 \t\t\tdeviceData[deviceID].push(entr...\n      MLOAD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 20\t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH [tag] 90\t\t\tdeviceData[deviceID].push(entr...\n      SWAP3 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH [tag] 91\t\t\tdeviceData[deviceID].push(entr...\n      JUMP [in]\t\t\tdeviceData[deviceID].push(entr...\n    tag 90\t\t\tdeviceData[deviceID].push(entr...\n      JUMPDEST \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 20\t\t\tdeviceData[deviceID].push(entr...\n      DUP3 \t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      MLOAD \t\t\tdeviceData[deviceID].push(entr...\n      DUP2 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 1\t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      DUP1 \t\t\tdeviceData[deviceID].push(entr...\n      MLOAD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 20\t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH [tag] 92\t\t\tdeviceData[deviceID].push(entr...\n      SWAP3 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP2 \t\t\tdeviceData[deviceID].push(entr...\n      SWAP1 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH [tag] 91\t\t\tdeviceData[deviceID].push(entr...\n      JUMP [in]\t\t\tdeviceData[deviceID].push(entr...\n    tag 92\t\t\tdeviceData[deviceID].push(entr...\n      JUMPDEST \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 40\t\t\tdeviceData[deviceID].push(entr...\n      DUP3 \t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      MLOAD \t\t\tdeviceData[deviceID].push(entr...\n      DUP2 \t\t\tdeviceData[deviceID].push(entr...\n      PUSH 2\t\t\tdeviceData[deviceID].push(entr...\n      ADD \t\t\tdeviceData[deviceID].push(entr...\n      SSTORE \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\tdeviceData[deviceID].push(entr...\n      POP \t\t\t_\n      POP \t\t\tfunction storeData(string memo...\n      POP \t\t\tfunction storeData(string memo...\n      POP \t\t\tfunction storeData(string memo...\n      JUMP [out]\t\t\tfunction storeData(string memo...\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 93\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 53\t\t\t\n      JUMP [in]\t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH FF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      DUP1 \t\t\t\n      ADD \t\t\t\n      OR \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      ADD \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      DUP3 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMPI \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n    tag 97\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      MLOAD \t\t\t\n      DUP3 \t\t\t\n      SSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 99\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 100\t\t\t\n      JUMP [in]\t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP [out]\t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 102\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMP \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP [out]\t\t\t\n    tag 104\t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH 0\t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH [tag] 106\t\t\t\\n        string dataType;\\r\\n...\n      PUSH [tag] 107\t\t\t dataType;\\r\\n        string v...\n      DUP5 \t\t\t uint2\n      PUSH [tag] 108\t\t\t dataType;\\r\\n        string v...\n      JUMP [in]\t\t\t dataType;\\r\\n        string v...\n    tag 107\t\t\t dataType;\\r\\n        string v...\n      JUMPDEST \t\t\t dataType;\\r\\n        string v...\n      PUSH [tag] 109\t\t\t\\n        string dataType;\\r\\n...\n      JUMP [in]\t\t\t\\n        string dataType;\\r\\n...\n    tag 106\t\t\t\\n        string dataType;\\r\\n...\n      JUMPDEST \t\t\t\\n        string dataType;\\r\\n...\n      SWAP1 \t\t\taEntry {\\r\\n        string dat...\n      POP \t\t\taEntry {\\r\\n        string dat...\n      DUP3 \t\t\t   add\n      DUP2 \t\t\t }\\r\\n\\r\n      MSTORE \t\t\tp;\\r\\n    }\\r\\n\\r\\n    addr\n      PUSH 20\t\t\tstri\n      DUP2 \t\t\tappin\n      ADD \t\t\t   mapping(strin\n      DUP5 \t\t\tata\n      DUP5 \t\t\te devi\n      DUP5 \t\t\triv\n      ADD \t\t\t]) private devic\n      GT \t\t\try[]) private deviceData;\n      ISZERO \t\t\tEn\n      PUSH [tag] 110\t\t\tEn\n      JUMPI \t\t\tEn\n      PUSH 0\t\t\t(\n      DUP1 \t\t\ti\n      REVERT \t\t\t   mapping(a\n    tag 110\t\t\tEn\n      JUMPDEST \t\t\tEn\n      PUSH [tag] 111\t\t\tool) public authorizedDevices;...\n      DUP5 \t\t\t    co\n      DUP3 \t\t\t;\\r\\n\n      DUP6 \t\t\tvic\n      PUSH [tag] 112\t\t\tool) public authorizedDevices;...\n      JUMP [in]\t\t\tool) public authorizedDevices;...\n    tag 111\t\t\tool) public authorizedDevices;...\n      JUMPDEST \t\t\tool) public authorizedDevices;...\n      POP \t\t\tstruct DataEntry {\\r\\n        ...\n      SWAP4 \t\t\tstruct DataEntry {\\r\\n        ...\n      SWAP3 \t\t\tstruct DataEntry {\\r\\n        ...\n      POP \t\t\tstruct DataEntry {\\r\\n        ...\n      POP \t\t\tstruct DataEntry {\\r\\n        ...\n      POP \t\t\tstruct DataEntry {\\r\\n        ...\n      JUMP [out]\t\t\tstruct DataEntry {\\r\\n        ...\n    tag 113\t\t\t\\r\\n        owner = msg.sender...\n      JUMPDEST \t\t\t\\r\\n        owner = msg.sender...\n      PUSH 0\t\t\t\\r\\n        owner = msg.sender...\n      DUP2 \t\t\tmsg.se\n      CALLDATALOAD \t\t\t     require(msg.sen\n      SWAP1 \t\t\t() {\\r\\n        require(msg.se...\n      POP \t\t\t() {\\r\\n        require(msg.se...\n      PUSH [tag] 115\t\t\tner, \"Not contract owner\");\\r\\...\n      DUP2 \t\t\t\\r\\n   \n      PUSH [tag] 116\t\t\tner, \"Not contract owner\");\\r\\...\n      JUMP [in]\t\t\tner, \"Not contract owner\");\\r\\...\n    tag 115\t\t\tner, \"Not contract owner\");\\r\\...\n      JUMPDEST \t\t\tner, \"Not contract owner\");\\r\\...\n      SWAP3 \t\t\t onlyOwner() {\\r\\n        requ...\n      SWAP2 \t\t\t onlyOwner() {\\r\\n        requ...\n      POP \t\t\t onlyOwner() {\\r\\n        requ...\n      POP \t\t\t onlyOwner() {\\r\\n        requ...\n      JUMP [out]\t\t\t onlyOwner() {\\r\\n        requ...\n    tag 117\t\t\tier onlyAuthorized() {\\r\\n    ...\n      JUMPDEST \t\t\tier onlyAuthorized() {\\r\\n    ...\n      PUSH 0\t\t\tier onlyAuthorized() {\\r\\n    ...\n      DUP3 \t\t\t}\\r\\n\n      PUSH 1F\t\t\t;\\r\\n \n      DUP4 \t\t\t      \n      ADD \t\t\t;\\r\\n        _;\\r\\n  \n      SLT \t\t\ted\");\\r\\n        _;\\r\\n    }\\r...\n      PUSH [tag] 119\t\t\tUn\n      JUMPI \t\t\tUn\n      PUSH 0\t\t\ta\n      DUP1 \t\t\to\n      REVERT \t\t\t function au\n    tag 119\t\t\tUn\n      JUMPDEST \t\t\tUn\n      DUP2 \t\t\tnlyOwn\n      CALLDATALOAD \t\t\tice) public onlyOwne\n      PUSH [tag] 120\t\t\trizedDevices[device] = true;\\r...\n      DUP5 \t\t\tvic\n      DUP3 \t\t\tdress \n      PUSH 20\t\t\tvice\n      DUP7 \t\t\trevoke\n      ADD \t\t\tion revokeDevice(\n      PUSH [tag] 104\t\t\trizedDevices[device] = true;\\r...\n      JUMP [in]\t\t\trizedDevices[device] = true;\\r...\n    tag 120\t\t\trizedDevices[device] = true;\\r...\n      JUMPDEST \t\t\trizedDevices[device] = true;\\r...\n      SWAP2 \t\t\t    authorizedDevices[device] ...\n      POP \t\t\t    authorizedDevices[device] ...\n      POP \t\t\tsender], \"Unauthorized\");\\r\\n ...\n      SWAP3 \t\t\tsender], \"Unauthorized\");\\r\\n ...\n      SWAP2 \t\t\tsender], \"Unauthorized\");\\r\\n ...\n      POP \t\t\tsender], \"Unauthorized\");\\r\\n ...\n      POP \t\t\tsender], \"Unauthorized\");\\r\\n ...\n      JUMP [out]\t\t\tsender], \"Unauthorized\");\\r\\n ...\n    tag 121\t\t\tyOwner {\\r\\n        authorized...\n      JUMPDEST \t\t\tyOwner {\\r\\n        authorized...\n      PUSH 0\t\t\tyOwner {\\r\\n        authorized...\n      DUP2 \t\t\ta(stri\n      CALLDATALOAD \t\t\ttion storeData(strin\n      SWAP1 \t\t\t\\n    function storeData(strin\n      POP \t\t\t\\n    function storeData(strin\n      PUSH [tag] 123\t\t\tdeviceID, string memory dataTy...\n      DUP2 \t\t\taType\n      PUSH [tag] 124\t\t\tdeviceID, string memory dataTy...\n      JUMP [in]\t\t\tdeviceID, string memory dataTy...\n    tag 123\t\t\tdeviceID, string memory dataTy...\n      JUMPDEST \t\t\tdeviceID, string memory dataTy...\n      SWAP3 \t\t\t\\r\\n    }\\r\\n\\r\\n    function ...\n      SWAP2 \t\t\t\\r\\n    }\\r\\n\\r\\n    function ...\n      POP \t\t\t\\r\\n    }\\r\\n\\r\\n    function ...\n      POP \t\t\t\\r\\n    }\\r\\n\\r\\n    function ...\n      JUMP [out]\t\t\t\\r\\n    }\\r\\n\\r\\n    function ...\n    tag 13\t\t\try value) public onlyAuthorize...\n      JUMPDEST \t\t\try value) public onlyAuthorize...\n      PUSH 0\t\t\try value) public onlyAuthorize...\n      PUSH 20\t\t\t r\n      DUP3 \t\t\t\");\\r\\n    \n      DUP5 \t\t\t device\n      SUB \t\t\talid deviceID\");\\r\\n     \n      SLT \t\t\t\"Invalid deviceID\");\\r\\n      ...\n      ISZERO \t\t\t0,\n      PUSH [tag] 126\t\t\t0,\n      JUMPI \t\t\t0,\n      PUSH 0\t\t\ta\n      DUP1 \t\t\ts\n      REVERT \t\t\tre(bytes(dat\n    tag 126\t\t\t0,\n      JUMPDEST \t\t\t0,\n      PUSH 0\t\t\t \n      PUSH [tag] 127\t\t\tue).length > 0, \"Invalid value...\n      DUP5 \t\t\tDataEnt\n      DUP3 \t\t\t\\n     \n      DUP6 \t\t\tvalue\");\\r\n      ADD \t\t\tlid value\");\\r\\n\\r\\n      \n      PUSH [tag] 113\t\t\tue).length > 0, \"Invalid value...\n      JUMP [in]\t\t\tue).length > 0, \"Invalid value...\n    tag 127\t\t\tue).length > 0, \"Invalid value...\n      JUMPDEST \t\t\tue).length > 0, \"Invalid value...\n      SWAP2 \t\t\t(bytes(value).length > 0, \"Inv...\n      POP \t\t\t(bytes(value).length > 0, \"Inv...\n      POP \t\t\th > 0, \"Invalid dataType\");\\r\\...\n      SWAP3 \t\t\t.length > 0, \"Invalid deviceID...\n      SWAP2 \t\t\t.length > 0, \"Invalid deviceID...\n      POP \t\t\t.length > 0, \"Invalid deviceID...\n      POP \t\t\t.length > 0, \"Invalid deviceID...\n      JUMP [out]\t\t\t.length > 0, \"Invalid deviceID...\n    tag 25\t\t\ttry(dataType, value, block.tim...\n      JUMPDEST \t\t\ttry(dataType, value, block.tim...\n      PUSH 0\t\t\ttry(dataType, value, block.tim...\n      PUSH 20\t\t\tst\n      DUP3 \t\t\tetDataCou\n      DUP5 \t\t\tunction\n      SUB \t\t\t   function getDataCoun\n      SLT \t\t\t\\n\\r\\n    function getDataCoun...\n      ISZERO \t\t\t }\n      PUSH [tag] 129\t\t\t }\n      JUMPI \t\t\t }\n      PUSH 0\t\t\tv\n      DUP1 \t\t\t \n      REVERT \t\t\t memory devi\n    tag 129\t\t\t }\n      JUMPDEST \t\t\t }\n      PUSH 0\t\t\tc\n      DUP3 \t\t\tceData[de\n      ADD \t\t\tdeviceData[device\n      CALLDATALOAD \t\t\t      return deviceData[device...\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnction getDataByIn\n      DUP2 \t\t\t\\r\\n    \n      GT \t\t\t}\\r\\n\\r\\n    function getDataB...\n      ISZERO \t\t\t  \n      PUSH [tag] 130\t\t\t  \n      JUMPI \t\t\t  \n      PUSH 0\t\t\to\n      DUP1 \t\t\tm\n      REVERT \t\t\tstring memor\n    tag 130\t\t\t  \n      JUMPDEST \t\t\t  \n      PUSH [tag] 131\t\t\t public view returns (string m...\n      DUP5 \t\t\tt256) {\n      DUP3 \t\t\tmory, \n      DUP6 \t\t\t, string \n      ADD \t\t\tmory, string memory, u\n      PUSH [tag] 117\t\t\t public view returns (string m...\n      JUMP [in]\t\t\t public view returns (string m...\n    tag 131\t\t\t public view returns (string m...\n      JUMPDEST \t\t\t public view returns (string m...\n      SWAP2 \t\t\t256 index) public view returns...\n      POP \t\t\t256 index) public view returns...\n      POP \t\t\t view returns (uint256) {\\r\\n ...\n      SWAP3 \t\t\ttry);\\r\\n    }\\r\\n\\r\\n    func...\n      SWAP2 \t\t\ttry);\\r\\n    }\\r\\n\\r\\n    func...\n      POP \t\t\ttry);\\r\\n    }\\r\\n\\r\\n    func...\n      POP \t\t\ttry);\\r\\n    }\\r\\n\\r\\n    func...\n      JUMP [out]\t\t\ttry);\\r\\n    }\\r\\n\\r\\n    func...\n    tag 41\t\t\t< deviceData[deviceID].length,...\n      JUMPDEST \t\t\t< deviceData[deviceID].length,...\n      PUSH 0\t\t\t< deviceData[deviceID].length,...\n      DUP1 \t\t\t< deviceData[deviceID].length,...\n      PUSH 0\t\t\t< deviceData[deviceID].length,...\n      PUSH 60\t\t\tme\n      DUP5 \t\t\tue, entry\n      DUP7 \t\t\tentry.v\n      SUB \t\t\tpe, entry.value, entry.\n      SLT \t\t\ttaType, entry.value, entry.tim...\n      ISZERO \t\t\t.d\n      PUSH [tag] 133\t\t\t.d\n      JUMPI \t\t\t.d\n      PUSH 0\t\t\t\\r\n      DUP1 \t\t\t \n      REVERT \t\t\tp);\\r\\n    }\\r\\n\n    tag 133\t\t\t.d\n      JUMPDEST \t\t\t.d\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 135\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 117\t\t\t\n      JUMP [in]\t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 117\t\t\t\n      JUMP [in]\t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 139\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 117\t\t\t\n      JUMP [in]\t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\turn (entry.dataType, entry.val...\n      POP \t\t\turn (entry.dataType, entry.val...\n      SWAP3 \t\t\turn (entry.dataType, entry.val...\n      POP \t\t\turn (entry.dataType, entry.val...\n      SWAP3 \t\t\turn (entry.dataType, entry.val...\n      JUMP [out]\t\t\turn (entry.dataType, entry.val...\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 142\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 143\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 117\t\t\t\n      JUMP [in]\t\t\t\n    tag 143\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 144\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP [in]\t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 147\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMP [in]\t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 151\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP [in]\t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 155\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP [in]\t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 157\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 159\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP [in]\t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 161\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMP [in]\t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 165\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP [in]\t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 166\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP [in]\t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 168\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP [in]\t\t\t\n    tag 168\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 171\t\t\t\n      PUSH C\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 171\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 556E617574686F72697A65640000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 174\t\t\t\n      PUSH 10\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 496E76616C696420646174615479706500000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 177\t\t\t\n      PUSH D\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 496E76616C69642076616C756500000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 180\t\t\t\n      PUSH 10\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 496E76616C696420646576696365494400000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 183\t\t\t\n      PUSH 12\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 183\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 4E6F7420636F6E7472616374206F776E65720000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 186\t\t\t\n      PUSH 13\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP [in]\t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 496E646578206F7574206F6620626F756E647300000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 189\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP [in]\t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 192\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP [in]\t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 194\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMP [in]\t\t\t\n    tag 194\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 196\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 149\t\t\t\n      JUMP [in]\t\t\t\n    tag 196\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 22\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 198\t\t\t\n      DUP2 \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP [in]\t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 199\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP [in]\t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 200\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP [in]\t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 202\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP [in]\t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMP [in]\t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 206\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP [in]\t\t\t\n    tag 206\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 208\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 178\t\t\t\n      JUMP [in]\t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 210\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 181\t\t\t\n      JUMP [in]\t\t\t\n    tag 210\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 212\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMP [in]\t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 28\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 214\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP [in]\t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 109\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 217\t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP [in]\t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 221\t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP [in]\t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 226\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMP [in]\t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 112\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMP \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 236\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 240\t\t\t\n      PUSH [tag] 241\t\t\t\n      JUMP [in]\t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 116\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 246\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMP [in]\t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 249\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP [in]\t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    .data\n"
}